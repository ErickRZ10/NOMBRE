/* The following code was generated by JFlex 1.4.3 on 27/06/25, 7:43 a. m. */

package analizador2;
import static analizador2.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/06/25, 7:43 a. m. from the specification file
 * <tt>C:/Universidad/Semestres/5to/Cursos/Compiladores/Analizador2/Analizador2/src/analizador2/entrada.jflex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\35\2\0\1\3\22\0\1\3\1\45\1\33\2\0"+
    "\1\43\1\50\1\36\1\52\1\53\1\41\1\37\1\62\1\40\1\32"+
    "\1\42\12\2\1\61\1\60\1\47\1\44\1\46\2\0\32\1\1\56"+
    "\1\34\1\57\1\0\1\1\1\0\1\21\1\24\1\26\1\22\1\6"+
    "\1\5\1\31\1\12\1\4\1\1\1\25\1\7\1\23\1\15\1\13"+
    "\1\20\1\1\1\14\1\10\1\16\1\17\1\30\1\11\1\1\1\27"+
    "\1\1\1\54\1\51\1\55\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\22\2\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\1\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\31\4\2\1\32"+
    "\24\2\1\33\11\2\1\0\4\2\1\0\1\34\3\0"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\4\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\2\2\1\55\5\2\1\56\2\2\1\57\5\2"+
    "\1\60\7\2\1\61\3\2\1\62\4\2\1\63\1\64"+
    "\1\2\1\65\1\2\1\66\3\2\2\0\1\67\4\2"+
    "\1\70\2\2\1\71\1\2\1\72\1\73\1\74\1\75"+
    "\1\76\10\2\1\77\1\100\2\2\1\101\1\102\2\2"+
    "\1\103\3\2\1\104\1\2\1\105\1\2\1\106\1\107"+
    "\5\2\1\110\1\111\3\2\1\112\1\113\3\2\1\114"+
    "\1\115\1\2\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\2\1\125\1\2\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\2\1\136\1\2\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\63"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\314\0\u072c\0\146"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\146\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1"+
    "\0\u0f24\0\u0495\0\63\0\u0f57\0\u0f8a\0\u0fbd\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\u0ff0\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\u072c\0\146\0\u1023"+
    "\0\u1056\0\146\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\146"+
    "\0\u1188\0\u11bb\0\146\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba"+
    "\0\146\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\146\0\u1452\0\u1485\0\u14b8\0\146\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\146\0\146\0\u15b7\0\146\0\u15ea\0\146\0\u161d"+
    "\0\u1650\0\u1683\0\u16b6\0\u16e9\0\63\0\u171c\0\u174f\0\u1782"+
    "\0\u17b5\0\146\0\u17e8\0\u181b\0\146\0\u184e\0\146\0\146"+
    "\0\146\0\146\0\146\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d"+
    "\0\u1980\0\u19b3\0\u19e6\0\146\0\146\0\u1a19\0\u1a4c\0\146"+
    "\0\146\0\u1a7f\0\u1ab2\0\146\0\u1ae5\0\u1b18\0\u1b4b\0\146"+
    "\0\u1b7e\0\146\0\u1bb1\0\146\0\146\0\u1be4\0\u1c17\0\u1c4a"+
    "\0\u1c7d\0\u1cb0\0\146\0\146\0\u1ce3\0\u1d16\0\u1d49\0\146"+
    "\0\146\0\u1d7c\0\u1daf\0\u1de2\0\146\0\146\0\u1e15\0\146"+
    "\0\146\0\146\0\146\0\146\0\146\0\146\0\u1e48\0\146"+
    "\0\u1e7b\0\146\0\146\0\146\0\146\0\146\0\146\0\146"+
    "\0\146\0\u1eae\0\146\0\u1ee1\0\146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\3\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\3\1\26\1\3"+
    "\1\27\1\3\1\30\1\31\1\2\1\5\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\64\0\2\3\1\0\26\3\33\0"+
    "\1\4\27\0\1\57\33\0\1\5\31\0\1\5\24\0"+
    "\1\5\1\0\2\3\1\0\1\3\1\60\7\3\1\61"+
    "\5\3\1\62\6\3\32\0\2\3\1\0\3\3\1\63"+
    "\3\3\1\64\1\65\1\66\3\3\1\67\10\3\32\0"+
    "\2\3\1\0\3\3\1\70\5\3\1\71\14\3\32\0"+
    "\2\3\1\0\2\3\1\72\4\3\1\73\16\3\32\0"+
    "\2\3\1\0\2\3\1\74\7\3\1\75\1\76\12\3"+
    "\32\0\2\3\1\0\6\3\1\77\17\3\32\0\2\3"+
    "\1\0\14\3\1\100\11\3\32\0\2\3\1\0\2\3"+
    "\1\101\23\3\32\0\2\3\1\0\7\3\1\102\16\3"+
    "\32\0\2\3\1\0\10\3\1\103\2\3\1\104\7\3"+
    "\1\105\2\3\32\0\2\3\1\0\4\3\1\106\4\3"+
    "\1\107\14\3\32\0\2\3\1\0\10\3\1\110\2\3"+
    "\1\111\1\3\1\112\10\3\32\0\2\3\1\0\4\3"+
    "\1\113\1\114\2\3\1\115\15\3\32\0\2\3\1\0"+
    "\2\3\1\116\23\3\32\0\2\3\1\0\7\3\1\117"+
    "\3\3\1\120\1\3\1\121\10\3\32\0\2\3\1\0"+
    "\7\3\1\122\1\123\12\3\1\124\2\3\4\0\1\125"+
    "\25\0\2\3\1\0\6\3\1\126\1\127\1\130\15\3"+
    "\32\0\2\3\1\0\2\3\1\131\23\3\31\0\33\132"+
    "\1\133\1\134\26\132\34\135\1\136\1\135\1\137\24\135"+
    "\44\0\1\140\62\0\1\141\1\0\1\142\55\0\1\143"+
    "\2\0\1\144\60\0\1\145\1\0\1\146\62\0\1\147"+
    "\62\0\1\150\62\0\1\151\62\0\1\152\62\0\1\153"+
    "\66\0\1\154\63\0\1\155\13\0\1\156\61\0\2\3"+
    "\1\0\12\3\1\157\13\3\32\0\2\3\1\0\14\3"+
    "\1\160\11\3\32\0\2\3\1\0\7\3\1\161\16\3"+
    "\32\0\2\3\1\0\10\3\1\162\15\3\32\0\2\3"+
    "\1\0\7\3\1\163\16\3\32\0\2\3\1\0\3\3"+
    "\1\164\22\3\32\0\2\3\1\0\1\165\3\3\1\166"+
    "\21\3\32\0\2\3\1\0\13\3\1\167\12\3\32\0"+
    "\2\3\1\0\12\3\1\170\13\3\32\0\2\3\1\0"+
    "\7\3\1\171\16\3\32\0\2\3\1\0\3\3\1\172"+
    "\6\3\1\173\13\3\32\0\2\3\1\0\10\3\1\174"+
    "\4\3\1\175\10\3\32\0\2\3\1\0\14\3\1\176"+
    "\11\3\32\0\2\3\1\0\1\177\25\3\32\0\2\3"+
    "\1\0\12\3\1\200\13\3\32\0\2\3\1\0\1\3"+
    "\1\201\2\3\1\202\5\3\1\203\13\3\32\0\2\3"+
    "\1\0\11\3\1\204\14\3\32\0\2\3\1\0\13\3"+
    "\1\205\1\3\1\206\10\3\32\0\2\3\1\0\14\3"+
    "\1\207\11\3\32\0\2\3\1\0\14\3\1\210\11\3"+
    "\32\0\2\3\1\0\2\3\1\211\23\3\32\0\2\3"+
    "\1\0\1\212\3\3\1\213\21\3\32\0\2\3\1\0"+
    "\1\214\25\3\32\0\2\3\1\0\20\3\1\215\5\3"+
    "\32\0\2\3\1\0\4\3\1\216\21\3\32\0\2\3"+
    "\1\0\23\3\1\217\2\3\32\0\2\3\1\0\15\3"+
    "\1\220\10\3\32\0\2\3\1\0\10\3\1\221\15\3"+
    "\32\0\2\3\1\0\1\3\1\222\24\3\32\0\2\3"+
    "\1\0\16\3\1\223\5\3\1\224\1\3\32\0\2\3"+
    "\1\0\12\3\1\225\13\3\32\0\2\3\1\0\12\3"+
    "\1\226\1\3\1\227\11\3\32\0\2\3\1\0\7\3"+
    "\1\230\16\3\32\0\2\3\1\0\2\3\1\231\23\3"+
    "\32\0\2\3\1\0\12\3\1\232\13\3\31\0\34\233"+
    "\1\234\1\233\1\235\24\233\1\0\2\3\1\0\15\3"+
    "\1\236\10\3\32\0\2\3\1\0\11\3\1\237\14\3"+
    "\32\0\2\3\1\0\15\3\1\240\10\3\32\0\2\3"+
    "\1\0\22\3\1\241\3\3\31\0\35\132\1\0\25\132"+
    "\36\0\1\137\24\0\35\135\1\0\25\135\35\145\1\0"+
    "\25\145\1\0\2\3\1\0\3\3\1\242\3\3\1\243"+
    "\16\3\32\0\2\3\1\0\15\3\1\244\10\3\32\0"+
    "\2\3\1\0\17\3\1\245\6\3\32\0\2\3\1\0"+
    "\4\3\1\246\21\3\32\0\2\3\1\0\1\3\1\247"+
    "\24\3\32\0\2\3\1\0\2\3\1\250\23\3\32\0"+
    "\2\3\1\0\17\3\1\251\6\3\32\0\2\3\1\0"+
    "\14\3\1\252\11\3\32\0\2\3\1\0\1\3\1\253"+
    "\24\3\32\0\2\3\1\0\1\254\12\3\1\255\12\3"+
    "\32\0\2\3\1\0\12\3\1\256\13\3\32\0\2\3"+
    "\1\0\2\3\1\257\23\3\32\0\2\3\1\0\3\3"+
    "\1\260\22\3\32\0\2\3\1\0\1\261\25\3\32\0"+
    "\2\3\1\0\13\3\1\262\12\3\32\0\2\3\1\0"+
    "\13\3\1\263\12\3\32\0\2\3\1\0\2\3\1\264"+
    "\23\3\32\0\2\3\1\0\2\3\1\265\23\3\32\0"+
    "\2\3\1\0\1\266\25\3\32\0\2\3\1\0\3\3"+
    "\1\267\22\3\32\0\2\3\1\0\2\3\1\270\23\3"+
    "\32\0\2\3\1\0\12\3\1\271\13\3\32\0\2\3"+
    "\1\0\15\3\1\272\10\3\32\0\2\3\1\0\11\3"+
    "\1\273\14\3\32\0\2\3\1\0\4\3\1\274\21\3"+
    "\32\0\2\3\1\0\11\3\1\275\14\3\32\0\2\3"+
    "\1\0\1\276\25\3\32\0\2\3\1\0\15\3\1\277"+
    "\10\3\32\0\2\3\1\0\2\3\1\300\23\3\32\0"+
    "\2\3\1\0\22\3\1\301\3\3\32\0\2\3\1\0"+
    "\3\3\1\302\22\3\32\0\2\3\1\0\15\3\1\303"+
    "\10\3\32\0\2\3\1\0\2\3\1\304\23\3\67\0"+
    "\1\235\24\0\35\233\1\0\25\233\1\0\2\3\1\0"+
    "\10\3\1\305\15\3\32\0\2\3\1\0\4\3\1\306"+
    "\5\3\1\307\13\3\32\0\2\3\1\0\12\3\1\310"+
    "\13\3\32\0\2\3\1\0\12\3\1\311\13\3\32\0"+
    "\2\3\1\0\10\3\1\312\15\3\32\0\2\3\1\0"+
    "\12\3\1\313\13\3\32\0\2\3\1\0\2\3\1\314"+
    "\23\3\32\0\2\3\1\0\11\3\1\315\14\3\32\0"+
    "\2\3\1\0\22\3\1\316\3\3\32\0\2\3\1\0"+
    "\1\317\25\3\32\0\2\3\1\0\10\3\1\320\15\3"+
    "\32\0\2\3\1\0\2\3\1\321\23\3\32\0\2\3"+
    "\1\0\7\3\1\322\16\3\32\0\2\3\1\0\3\3"+
    "\1\323\22\3\32\0\2\3\1\0\10\3\1\324\15\3"+
    "\32\0\2\3\1\0\12\3\1\325\13\3\32\0\2\3"+
    "\1\0\2\3\1\326\23\3\32\0\2\3\1\0\1\3"+
    "\1\327\24\3\32\0\2\3\1\0\12\3\1\330\13\3"+
    "\32\0\2\3\1\0\22\3\1\331\3\3\32\0\2\3"+
    "\1\0\12\3\1\332\13\3\32\0\2\3\1\0\23\3"+
    "\1\333\2\3\32\0\2\3\1\0\6\3\1\334\17\3"+
    "\32\0\2\3\1\0\21\3\1\335\4\3\32\0\2\3"+
    "\1\0\12\3\1\336\13\3\32\0\2\3\1\0\1\337"+
    "\25\3\32\0\2\3\1\0\2\3\1\340\23\3\32\0"+
    "\2\3\1\0\7\3\1\341\16\3\32\0\2\3\1\0"+
    "\12\3\1\342\13\3\32\0\2\3\1\0\25\3\1\343"+
    "\32\0\2\3\1\0\12\3\1\344\13\3\32\0\2\3"+
    "\1\0\22\3\1\345\3\3\32\0\2\3\1\0\11\3"+
    "\1\346\14\3\32\0\2\3\1\0\12\3\1\347\13\3"+
    "\32\0\2\3\1\0\11\3\1\350\14\3\32\0\2\3"+
    "\1\0\2\3\1\351\23\3\32\0\2\3\1\0\11\3"+
    "\1\352\14\3\32\0\2\3\1\0\10\3\1\353\15\3"+
    "\32\0\2\3\1\0\13\3\1\354\12\3\32\0\2\3"+
    "\1\0\2\3\1\355\23\3\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7956];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\11\15\1\10\11\1\1\1\0"+
    "\45\1\1\0\4\1\1\0\1\11\3\0\6\11\1\1"+
    "\10\11\55\1\2\0\1\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 63: 
          { lexeme=yytext(); return NONE;
          }
        case 96: break;
        case 94: 
          { lexeme=yytext(); return VECTOR;
          }
        case 97: break;
        case 3: 
          { lexeme=yytext(); return INTEGER_LITERAL;
          }
        case 98: break;
        case 46: 
          { lexeme=yytext(); return LET;
          }
        case 99: break;
        case 72: 
          { lexeme=yytext(); return FLOAT;
          }
        case 100: break;
        case 40: 
          { lexeme=yytext(); return LESS_EQUALS;
          }
        case 101: break;
        case 27: 
          { lexeme=yytext(); return AS;
          }
        case 102: break;
        case 41: 
          { lexeme=yytext(); return AND;
          }
        case 103: break;
        case 6: 
          { lexeme=yytext(); return PLUS;
          }
        case 104: break;
        case 65: 
          { lexeme=yytext(); return TYPE;
          }
        case 105: break;
        case 34: 
          { lexeme=yytext(); return MULTIPLY_ASSIGN;
          }
        case 106: break;
        case 51: 
          { lexeme=yytext(); return DEF;
          }
        case 107: break;
        case 13: 
          { lexeme=yytext(); return GREATER_THAN;
          }
        case 108: break;
        case 69: 
          { lexeme=yytext(); return BOOL;
          }
        case 109: break;
        case 29: 
          { lexeme=yytext(); return CHAR_LITERAL;
          }
        case 110: break;
        case 88: 
          { lexeme=yytext(); return STRUCT;
          }
        case 111: break;
        case 92: 
          { lexeme=yytext(); return RETURN;
          }
        case 112: break;
        case 38: 
          { lexeme=yytext(); return NOT_EQUALS;
          }
        case 113: break;
        case 60: 
          { lexeme=yytext(); return ENUM;
          }
        case 114: break;
        case 90: 
          { lexeme=yytext(); return OPTION;
          }
        case 115: break;
        case 71: 
          { lexeme=yytext(); return CHAR;
          }
        case 116: break;
        case 7: 
          { lexeme=yytext(); return MINUS;
          }
        case 117: break;
        case 47: 
          { lexeme=yytext(); return SET;
          }
        case 118: break;
        case 4: 
          { /*Ignore*/
          }
        case 119: break;
        case 82: 
          { lexeme=yytext(); return MATCH;
          }
        case 120: break;
        case 49: 
          { lexeme=yytext(); return USE;
          }
        case 121: break;
        case 57: 
          { lexeme=yytext(); return FROM;
          }
        case 122: break;
        case 32: 
          { lexeme=yytext(); return ARROW;
          }
        case 123: break;
        case 31: 
          { lexeme=yytext(); return MINUS_ASSIGN;
          }
        case 124: break;
        case 52: 
          { lexeme=yytext(); return MOD;
          }
        case 125: break;
        case 70: 
          { lexeme=yytext(); return BYTE;
          }
        case 126: break;
        case 30: 
          { lexeme=yytext(); return PLUS_ASSIGN;
          }
        case 127: break;
        case 1: 
          { return ERROR;
          }
        case 128: break;
        case 66: 
          { lexeme=yytext(); return UNIT;
          }
        case 129: break;
        case 81: 
          { lexeme=yytext(); return ARRAY;
          }
        case 130: break;
        case 75: 
          { lexeme=yytext(); return WHILE;
          }
        case 131: break;
        case 9: 
          { lexeme=yytext(); return DIVIDE;
          }
        case 132: break;
        case 84: 
          { lexeme=yytext(); return CONST;
          }
        case 133: break;
        case 55: 
          { lexeme=yytext(); return BYTE_LITERAL;
          }
        case 134: break;
        case 93: 
          { lexeme=yytext(); return UNSAFE;
          }
        case 135: break;
        case 33: 
          { lexeme=yytext(); return POWER;
          }
        case 136: break;
        case 22: 
          { lexeme=yytext(); return COLON;
          }
        case 137: break;
        case 48: 
          { lexeme=yytext(); return REF;
          }
        case 138: break;
        case 59: 
          { lexeme=yytext(); return ELSE;
          }
        case 139: break;
        case 83: 
          { lexeme=yytext(); return BREAK;
          }
        case 140: break;
        case 76: 
          { lexeme=yytext(); return TRAIT;
          }
        case 141: break;
        case 11: 
          { lexeme=yytext(); return ASSIGN;
          }
        case 142: break;
        case 5: 
          { lexeme=yytext(); return DOT;
          }
        case 143: break;
        case 17: 
          { lexeme=yytext(); return LEFT_BRACE;
          }
        case 144: break;
        case 79: 
          { lexeme=yytext(); return ASYNC;
          }
        case 145: break;
        case 50: 
          { lexeme=yytext(); return PUB;
          }
        case 146: break;
        case 53: 
          { lexeme=yytext(); return MUT;
          }
        case 147: break;
        case 91: 
          { lexeme=yytext(); return RESULT;
          }
        case 148: break;
        case 28: 
          { lexeme=yytext(); return STRING_LITERAL;
          }
        case 149: break;
        case 80: 
          { lexeme=yytext(); return AWAIT;
          }
        case 150: break;
        case 61: 
          { lexeme=yytext(); return LOOP;
          }
        case 151: break;
        case 18: 
          { lexeme=yytext(); return RIGHT_BRACE;
          }
        case 152: break;
        case 87: 
          { lexeme=yytext(); return STRING;
          }
        case 153: break;
        case 86: 
          { lexeme = yytext(); return IMPORT;
          }
        case 154: break;
        case 74: 
          { lexeme=yytext(); return SUPER;
          }
        case 155: break;
        case 25: 
          { lexeme=yytext(); return IN;
          }
        case 156: break;
        case 58: 
          { lexeme=yytext(); return ELIF;
          }
        case 157: break;
        case 10: 
          { lexeme=yytext(); return MODULO;
          }
        case 158: break;
        case 77: 
          { lexeme=yytext(); return TUPLE;
          }
        case 159: break;
        case 23: 
          { lexeme=yytext(); return COMMA;
          }
        case 160: break;
        case 43: 
          { lexeme=yytext(); return FLOAT_LITERAL;
          }
        case 161: break;
        case 44: 
          { lexeme=yytext(); return INT;
          }
        case 162: break;
        case 56: 
          { lexeme=yytext(); return IMPL;
          }
        case 163: break;
        case 62: 
          { lexeme=yytext(); return SELF;
          }
        case 164: break;
        case 26: 
          { lexeme=yytext(); return FN;
          }
        case 165: break;
        case 35: 
          { lexeme=yytext(); return DIVIDE_ASSIGN;
          }
        case 166: break;
        case 15: 
          { lexeme=yytext(); return LEFT_PAREN;
          }
        case 167: break;
        case 64: 
          { lexeme=yytext(); return TRUE;
          }
        case 168: break;
        case 19: 
          { lexeme=yytext(); return LEFT_BRACKET;
          }
        case 169: break;
        case 20: 
          { lexeme=yytext(); return RIGHT_BRACKET;
          }
        case 170: break;
        case 12: 
          { lexeme=yytext(); return NOT;
          }
        case 171: break;
        case 42: 
          { lexeme=yytext(); return OR;
          }
        case 172: break;
        case 2: 
          { lexeme=yytext(); return IDENTIFIER;
          }
        case 173: break;
        case 54: 
          { lexeme=yytext(); return MAP;
          }
        case 174: break;
        case 67: 
          { lexeme=yytext(); return PASS;
          }
        case 175: break;
        case 8: 
          { lexeme=yytext(); return MULTIPLY;
          }
        case 176: break;
        case 45: 
          { lexeme=yytext(); return FOR;
          }
        case 177: break;
        case 89: 
          { lexeme=yytext(); return STATIC;
          }
        case 178: break;
        case 16: 
          { lexeme=yytext(); return RIGHT_PAREN;
          }
        case 179: break;
        case 73: 
          { lexeme=yytext(); return FALSE;
          }
        case 180: break;
        case 39: 
          { lexeme=yytext(); return GREATER_EQUALS;
          }
        case 181: break;
        case 85: 
          { lexeme=yytext(); return CRATE;
          }
        case 182: break;
        case 24: 
          { lexeme=yytext(); return IF;
          }
        case 183: break;
        case 78: 
          { lexeme=yytext(); return PRINT;
          }
        case 184: break;
        case 14: 
          { lexeme=yytext(); return LESS_THAN;
          }
        case 185: break;
        case 36: 
          { lexeme=yytext(); return MODULO_ASSIGN;
          }
        case 186: break;
        case 68: 
          { lexeme=yytext(); return MOVE;
          }
        case 187: break;
        case 95: 
          { lexeme=yytext(); return CONTINUE;
          }
        case 188: break;
        case 37: 
          { lexeme=yytext(); return EQUALS;
          }
        case 189: break;
        case 21: 
          { lexeme=yytext(); return SEMICOLON;
          }
        case 190: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
