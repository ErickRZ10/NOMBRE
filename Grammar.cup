package analizador2;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    public void syntax_error(Symbol s){ this.s = s; }
    public Symbol getS(){ return this.s; }
    private java.util.Map<String,String> table = new java.util.HashMap<>();
    public void declareVar(String id, String type) throws Exception {
        if(table.containsKey(id))
            throw new Exception("Variable redeclarada: " + id);
        table.put(id,type);
    }
    public void assignVar(String id, String type) throws Exception {
        String t = table.get(id);
        if(t==null)
            throw new Exception("Variable no declarada: " + id);
        if(!t.equals(type))
            throw new Exception("Se esperaba tipo " + t + " para " + id + ", se obtuvo " + type);
    }
    public String getVarType(String id){
        return table.getOrDefault(id, "Unknown");
    }
:};

/* ─────────────  TERMINALES  ───────────── */
terminal If, Elif, Else, While, Input, For, In, Def, From, Import, Punto, Corchete_a, Flecha, Corchete_c,
         Return, Print, Parentesis_a, Parentesis_c, Llave_a, Llave_c, Coma, PuntoComa, DosPuntos, True, False, None,
         Suma, Resta, Multiplicacion, Division, Modulo, Potencia, Op_logico, Op_relacional, Op_asignacion,
         Int, Float, Bool, String, Main, Break, Error;
terminal String NumeroEntero, NumeroDecimal, Cadena, Char, Identificador;

/* ─────────────  NO TERMINALES  ───────────── */
non terminal Object INICIO, BLOQUE, DECLARACIONES, FUNCIONES, FUNCION, PARAMS,
             SENTENCIAS, SENTENCIA, ASIGNACION, LLAMADA_FUNCION, IF_STATEMENT,
             ELIF_BLOQUES, ELSE_BLOQUE, DECLARACION_TIPADA,
             WHILE_LOOP, FOR_LOOP, PRINT_STMT, IMPORT_STMT, LISTA_VALORES;
non terminal String EXPRESION, VALOR;

/* ─────────────  PRECEDENCIAS  ───────────── */
precedence left Op_logico;
precedence left Op_relacional;
precedence left Suma, Resta;
precedence left Multiplicacion, Division, Modulo;
precedence right Potencia;

/* ─────────────  INICIO  ───────────── */
start with INICIO;

/* ─────────────  PRODUCCIONES  ───────────── */

/* 1. Programa: declaraciones globales + funciones */
INICIO ::= BLOQUE
         | INICIO BLOQUE;

BLOQUE ::= FUNCION
         | ASIGNACION PuntoComa
         | DECLARACION_TIPADA PuntoComa
         | IMPORT_STMT PuntoComa;


/* 2. Declaraciones globales */
DECLARACIONES ::= DECLARACIONES ASIGNACION PuntoComa
                | DECLARACIONES DECLARACION_TIPADA PuntoComa
                | DECLARACIONES IMPORT_STMT PuntoComa
                | ASIGNACION PuntoComa
                | IMPORT_STMT PuntoComa;

/* 3. Importación de librería */
IMPORT_STMT ::= From Identificador Import Identificador 
            | Import Identificador;

/* 4. Conjunto de funciones */
FUNCIONES ::= FUNCION
            | FUNCIONES FUNCION;


/* 5. Definición de función */
FUNCION ::= Def Identificador Parentesis_a PARAMS Parentesis_c Llave_a SENTENCIAS Llave_c
            |Def Main Parentesis_a PARAMS Parentesis_c Llave_a SENTENCIAS Llave_c;


/* 6. Parámetros */
PARAMS ::= /* vacío */
         | EXPRESION
         | EXPRESION Coma PARAMS;

/* 7. Bloque de sentencias */
SENTENCIAS ::= /* vacío */
             | SENTENCIAS SENTENCIA ;

/* 8. Sentencia individual */
SENTENCIA ::= ASIGNACION       PuntoComa
            | DECLARACION_TIPADA PuntoComa
            | LLAMADA_FUNCION  PuntoComa
            | PRINT_STMT       PuntoComa
            | IF_STATEMENT
            | WHILE_LOOP
            | FOR_LOOP
            | Return EXPRESION PuntoComa
            | Break PuntoComa;


DECLARACION_TIPADA ::= Int Identificador:id Op_asignacion EXPRESION:val
                        {: parser.declareVar(id, "Int"); parser.assignVar(id, val); :}
                     | Float Identificador:id Op_asignacion EXPRESION:val
                        {: parser.declareVar(id, "Float"); parser.assignVar(id, val); :}
                     | Bool Identificador:id Op_asignacion EXPRESION:val
                        {: parser.declareVar(id, "Bool"); parser.assignVar(id, val); :}
                     | String Identificador:id Op_asignacion EXPRESION:val
                        {: parser.declareVar(id, "String"); parser.assignVar(id, val); :} ;


/* 9. Asignación */
ASIGNACION ::= Identificador:id Op_asignacion EXPRESION:val
                {: parser.assignVar(id, val); :} ;

/* 10. Llamada a función */
LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS Parentesis_c
                     {: RESULT = "Unknown"; :} ;

/* 11. print(expr) */
PRINT_STMT ::= Print Parentesis_a EXPRESION Parentesis_c ;

/* 12. If anidado */
IF_STATEMENT ::= If Parentesis_a EXPRESION Parentesis_c
                 Llave_a SENTENCIAS Llave_c ELIF_BLOQUES ELSE_BLOQUE ;

ELIF_BLOQUES ::= /* vacío */
               | ELIF_BLOQUES Elif Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c ;

ELSE_BLOQUE ::= /* vacío */
              | Else Llave_a SENTENCIAS Llave_c ;

/* 13. While */
WHILE_LOOP ::= While Parentesis_a EXPRESION Parentesis_c
               Llave_a SENTENCIAS Llave_c ;

/* 14. For estilo C */
FOR_LOOP ::= For Parentesis_a ASIGNACION PuntoComa EXPRESION PuntoComa
             ASIGNACION Parentesis_c Llave_a SENTENCIAS Llave_c ;



/* 15. Expresiones */
EXPRESION ::= EXPRESION:e1 Suma EXPRESION:e2
            {: RESULT = ("Float".equals(e1) || "Float".equals(e2)) ? "Float" : "Int"; :}
            | EXPRESION:e1 Resta EXPRESION:e2
            {: RESULT = ("Float".equals(e1) || "Float".equals(e2)) ? "Float" : "Int"; :}
            | EXPRESION:e1 Multiplicacion EXPRESION:e2
            {: RESULT = ("Float".equals(e1) || "Float".equals(e2)) ? "Float" : "Int"; :}
            | EXPRESION:e1 Division EXPRESION:e2
            {: RESULT = "Float"; :}
            | EXPRESION:e1 Modulo EXPRESION:e2
            {: RESULT = "Int"; :}
            | EXPRESION:e1 Potencia EXPRESION:e2
            {: RESULT = "Float"; :}
            | EXPRESION:e1 Op_relacional EXPRESION:e2
            {: RESULT = "Bool"; :}
            | EXPRESION:e1 Op_logico EXPRESION:e2
            {: RESULT = "Bool"; :}
            | Parentesis_a EXPRESION:e Parentesis_c
            {: RESULT = e; :}
            | Input Parentesis_a Cadena Parentesis_c
            {: RESULT = "String"; :}
            | Input Parentesis_a Parentesis_c
            {: RESULT = "String"; :}
            | VALOR:v {: RESULT = v; :}
            | LLAMADA_FUNCION
            {: RESULT = "Unknown"; :};

LISTA_VALORES ::= /* vacío */
                  {: RESULT = ""; :}
                | EXPRESION
                  {: RESULT = "List"; :}
                | EXPRESION Coma LISTA_VALORES
                  {: RESULT = "List"; :} ;


/* 16. Valores */
VALOR ::= NumeroEntero
          {: RESULT = "Int"; :}
        | NumeroDecimal
          {: RESULT = "Float"; :}
        | Cadena
          {: RESULT = "String"; :}
        | Char
          {: RESULT = "Char"; :}
        | Identificador:id
          {: RESULT = parser.getVarType(id); :}
        | True
          {: RESULT = "Bool"; :}
        | False
          {: RESULT = "Bool"; :}
        | None
          {: RESULT = "None"; :}
        | Corchete_a LISTA_VALORES Corchete_c
          {: RESULT = "List"; :} ;
