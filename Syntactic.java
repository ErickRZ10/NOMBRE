
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 27 07:43:38 GMT-05:00 2025
//----------------------------------------------------

package analizador2;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 27 07:43:38 GMT-05:00 2025
  */
public class Syntactic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\004\000\002\024\006\000" +
    "\002\024\004\000\002\004\003\000\002\004\004\000\002" +
    "\005\012\000\002\006\002\000\002\006\003\000\002\006" +
    "\005\000\002\007\002\000\002\007\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\005\000\002\017\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\011\005\000\002\013\006" +
    "\000\002\022\006\000\002\014\013\000\002\015\002\000" +
    "\002\015\012\000\002\016\002\000\002\016\006\000\002" +
    "\020\011\000\002\021\015\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\006\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\025\002\000\002\025" +
    "\003\000\002\025\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\012\013\006\014\005\015\007\057\014\001" +
    "\002\000\004\031\235\001\002\000\004\057\232\001\002" +
    "\000\004\057\131\001\002\000\004\057\130\001\002\000" +
    "\006\002\uffff\013\006\001\002\000\004\002\127\001\002" +
    "\000\022\013\006\014\005\015\007\051\103\052\101\053" +
    "\104\054\106\057\014\001\002\000\004\031\076\001\002" +
    "\000\004\046\016\001\002\000\006\002\ufff7\013\ufff7\001" +
    "\002\000\030\010\026\017\022\024\023\033\033\034\031" +
    "\035\020\047\025\050\027\055\021\056\024\057\030\001" +
    "\002\000\032\021\uffce\025\uffce\030\uffce\031\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\001\002\000\032\021\uffc2\025\uffc2\030\uffc2\031\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\001\002\000\032\021\uffc7\025\uffc7\030\uffc7" +
    "\031\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\001\002\000\032\010\026\017\022" +
    "\021\uffcc\024\023\033\033\034\031\035\020\047\025\050" +
    "\027\055\021\056\024\057\030\001\002\000\030\010\026" +
    "\017\022\024\023\033\033\034\031\035\020\047\025\050" +
    "\027\055\021\056\024\057\030\001\002\000\032\021\uffc6" +
    "\025\uffc6\030\uffc6\031\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\001\002\000\032" +
    "\021\uffc9\025\uffc9\030\uffc9\031\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\001\002" +
    "\000\004\024\063\001\002\000\032\021\uffc8\025\uffc8\030" +
    "\uffc8\031\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\001\002\000\034\021\uffc5\024" +
    "\055\025\uffc5\030\uffc5\031\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\001\002\000" +
    "\032\021\uffc3\025\uffc3\030\uffc3\031\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\001" +
    "\002\000\032\021\uffcd\025\uffcd\030\uffcd\031\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\001\002\000\032\021\uffc4\025\uffc4\030\uffc4\031\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\001\002\000\026\025\uffe3\031\uffe3\036\043" +
    "\037\041\040\044\041\035\042\040\043\042\044\036\045" +
    "\037\001\002\000\030\010\026\017\022\024\023\033\033" +
    "\034\031\035\020\047\025\050\027\055\021\056\024\057" +
    "\030\001\002\000\030\010\026\017\022\024\023\033\033" +
    "\034\031\035\020\047\025\050\027\055\021\056\024\057" +
    "\030\001\002\000\030\010\026\017\022\024\023\033\033" +
    "\034\031\035\020\047\025\050\027\055\021\056\024\057" +
    "\030\001\002\000\030\010\026\017\022\024\023\033\033" +
    "\034\031\035\020\047\025\050\027\055\021\056\024\057" +
    "\030\001\002\000\030\010\026\017\022\024\023\033\033" +
    "\034\031\035\020\047\025\050\027\055\021\056\024\057" +
    "\030\001\002\000\030\010\026\017\022\024\023\033\033" +
    "\034\031\035\020\047\025\050\027\055\021\056\024\057" +
    "\030\001\002\000\030\010\026\017\022\024\023\033\033" +
    "\034\031\035\020\047\025\050\027\055\021\056\024\057" +
    "\030\001\002\000\030\010\026\017\022\024\023\033\033" +
    "\034\031\035\020\047\025\050\027\055\021\056\024\057" +
    "\030\001\002\000\032\021\uffd7\025\uffd7\030\uffd7\031\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\042\044" +
    "\uffd7\045\uffd7\001\002\000\032\021\uffd9\025\uffd9\030\uffd9" +
    "\031\uffd9\036\uffd9\037\uffd9\040\044\041\035\042\040\043" +
    "\042\044\uffd9\045\uffd9\001\002\000\032\021\uffd4\025\uffd4" +
    "\030\uffd4\031\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\042\044\uffd4\045\uffd4\001\002\000\032\021\uffd8" +
    "\025\uffd8\030\uffd8\031\uffd8\036\uffd8\037\uffd8\040\044\041" +
    "\035\042\040\043\042\044\uffd8\045\uffd8\001\002\000\032" +
    "\021\uffd5\025\uffd5\030\uffd5\031\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\042\044\uffd5\045\uffd5\001\002" +
    "\000\032\021\uffd3\025\uffd3\030\uffd3\031\uffd3\036\043\037" +
    "\041\040\044\041\035\042\040\043\042\044\uffd3\045\uffd3" +
    "\001\002\000\032\021\uffd2\025\uffd2\030\uffd2\031\uffd2\036" +
    "\043\037\041\040\044\041\035\042\040\043\042\044\uffd2" +
    "\045\037\001\002\000\032\021\uffd6\025\uffd6\030\uffd6\031" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\042" +
    "\044\uffd6\045\uffd6\001\002\000\006\025\ufff4\057\057\001" +
    "\002\000\004\025\062\001\002\000\006\025\ufff3\030\060" +
    "\001\002\000\006\025\ufff4\057\057\001\002\000\004\025" +
    "\ufff2\001\002\000\032\021\uffe2\025\uffe2\030\uffe2\031\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\001\002\000\006\025\065\055\064\001\002" +
    "\000\004\025\066\001\002\000\032\021\uffcf\025\uffcf\030" +
    "\uffcf\031\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\001\002\000\032\021\uffd0\025" +
    "\uffd0\030\uffd0\031\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\001\002\000\024\025" +
    "\070\036\043\037\041\040\044\041\035\042\040\043\042" +
    "\044\036\045\037\001\002\000\032\021\uffd1\025\uffd1\030" +
    "\uffd1\031\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\001\002\000\004\021\075\001" +
    "\002\000\026\021\uffcb\030\073\036\043\037\041\040\044" +
    "\041\035\042\040\043\042\044\036\045\037\001\002\000" +
    "\032\010\026\017\022\021\uffcc\024\023\033\033\034\031" +
    "\035\020\047\025\050\027\055\021\056\024\057\030\001" +
    "\002\000\004\021\uffca\001\002\000\032\021\uffc1\025\uffc1" +
    "\030\uffc1\031\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\001\002\000\022\013\ufffb" +
    "\014\ufffb\015\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\057" +
    "\ufffb\001\002\000\004\031\126\001\002\000\004\031\125" +
    "\001\002\000\004\057\122\001\002\000\006\002\000\013" +
    "\006\001\002\000\004\057\116\001\002\000\004\057\113" +
    "\001\002\000\004\031\112\001\002\000\004\057\107\001" +
    "\002\000\004\046\110\001\002\000\030\010\026\017\022" +
    "\024\023\033\033\034\031\035\020\047\025\050\027\055" +
    "\021\056\024\057\030\001\002\000\024\031\uffe4\036\043" +
    "\037\041\040\044\041\035\042\040\043\042\044\036\045" +
    "\037\001\002\000\022\013\ufffe\014\ufffe\015\ufffe\051\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\057\ufffe\001\002\000\004\046" +
    "\114\001\002\000\030\010\026\017\022\024\023\033\033" +
    "\034\031\035\020\047\025\050\027\055\021\056\024\057" +
    "\030\001\002\000\024\031\uffe5\036\043\037\041\040\044" +
    "\041\035\042\040\043\042\044\036\045\037\001\002\000" +
    "\004\046\117\001\002\000\030\010\026\017\022\024\023" +
    "\033\033\034\031\035\020\047\025\050\027\055\021\056" +
    "\024\057\030\001\002\000\024\031\uffe7\036\043\037\041" +
    "\040\044\041\035\042\040\043\042\044\036\045\037\001" +
    "\002\000\006\002\ufff6\013\ufff6\001\002\000\004\046\123" +
    "\001\002\000\030\010\026\017\022\024\023\033\033\034" +
    "\031\035\020\047\025\050\027\055\021\056\024\057\030" +
    "\001\002\000\024\031\uffe6\036\043\037\041\040\044\041" +
    "\035\042\040\043\042\044\036\045\037\001\002\000\022" +
    "\013\ufffd\014\ufffd\015\ufffd\051\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\057\ufffd\001\002\000\022\013\ufffc\014\ufffc\015\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\057\ufffc\001\002\000" +
    "\004\002\001\001\002\000\004\031\ufff8\001\002\000\004" +
    "\024\132\001\002\000\006\025\ufff4\057\057\001\002\000" +
    "\004\025\134\001\002\000\004\026\135\001\002\000\030" +
    "\004\ufff1\007\ufff1\011\ufff1\022\ufff1\023\ufff1\027\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\054\ufff1\057\ufff1\001\002\000\030" +
    "\004\152\007\154\011\137\022\153\023\147\027\146\051" +
    "\103\052\101\053\104\054\106\057\143\001\002\000\004" +
    "\024\220\001\002\000\030\004\uffe9\007\uffe9\011\uffe9\022" +
    "\uffe9\023\uffe9\027\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\057\uffe9\001\002\000\030\004\uffeb\007\uffeb\011\uffeb\022" +
    "\uffeb\023\uffeb\027\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\057\uffeb\001\002\000\030\004\ufff0\007\ufff0\011\ufff0\022" +
    "\ufff0\023\ufff0\027\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\057\ufff0\001\002\000\006\024\055\046\016\001\002\000" +
    "\030\004\uffea\007\uffea\011\uffea\022\uffea\023\uffea\027\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\057\uffea\001\002\000" +
    "\004\031\217\001\002\000\006\002\ufff5\013\ufff5\001\002" +
    "\000\004\024\214\001\002\000\004\031\213\001\002\000" +
    "\004\031\212\001\002\000\004\024\167\001\002\000\030" +
    "\010\026\017\022\024\023\033\033\034\031\035\020\047" +
    "\025\050\027\055\021\056\024\057\030\001\002\000\004" +
    "\024\157\001\002\000\004\031\156\001\002\000\030\004" +
    "\uffee\007\uffee\011\uffee\022\uffee\023\uffee\027\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\057\uffee\001\002\000\030\010" +
    "\026\017\022\024\023\033\033\034\031\035\020\047\025" +
    "\050\027\055\021\056\024\057\030\001\002\000\024\025" +
    "\161\036\043\037\041\040\044\041\035\042\040\043\042" +
    "\044\036\045\037\001\002\000\004\026\162\001\002\000" +
    "\030\004\ufff1\007\ufff1\011\ufff1\022\ufff1\023\ufff1\027\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\057\ufff1\001\002\000" +
    "\030\004\152\007\154\011\137\022\153\023\147\027\164" +
    "\051\103\052\101\053\104\054\106\057\143\001\002\000" +
    "\030\004\uffdb\007\uffdb\011\uffdb\022\uffdb\023\uffdb\027\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\054\uffdb\057\uffdb\001\002\000" +
    "\024\031\166\036\043\037\041\040\044\041\035\042\040" +
    "\043\042\044\036\045\037\001\002\000\030\004\uffe8\007" +
    "\uffe8\011\uffe8\022\uffe8\023\uffe8\027\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\057\uffe8\001\002\000\030\010\026\017" +
    "\022\024\023\033\033\034\031\035\020\047\025\050\027" +
    "\055\021\056\024\057\030\001\002\000\024\025\171\036" +
    "\043\037\041\040\044\041\035\042\040\043\042\044\036" +
    "\045\037\001\002\000\004\026\172\001\002\000\030\004" +
    "\ufff1\007\ufff1\011\ufff1\022\ufff1\023\ufff1\027\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\054\ufff1\057\ufff1\001\002\000\030\004" +
    "\152\007\154\011\137\022\153\023\147\027\174\051\103" +
    "\052\101\053\104\054\106\057\143\001\002\000\034\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\022\uffdf\023\uffdf" +
    "\027\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\057\uffdf\001" +
    "\002\000\034\004\uffdd\005\200\006\177\007\uffdd\011\uffdd" +
    "\022\uffdd\023\uffdd\027\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\057\uffdd\001\002\000\030\004\uffe0\007\uffe0\011\uffe0" +
    "\022\uffe0\023\uffe0\027\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\057\uffe0\001\002\000\004\026\207\001\002\000\004" +
    "\024\201\001\002\000\030\010\026\017\022\024\023\033" +
    "\033\034\031\035\020\047\025\050\027\055\021\056\024" +
    "\057\030\001\002\000\024\025\203\036\043\037\041\040" +
    "\044\041\035\042\040\043\042\044\036\045\037\001\002" +
    "\000\004\026\204\001\002\000\030\004\ufff1\007\ufff1\011" +
    "\ufff1\022\ufff1\023\ufff1\027\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\057\ufff1\001\002\000\030\004\152\007\154\011" +
    "\137\022\153\023\147\027\206\051\103\052\101\053\104" +
    "\054\106\057\143\001\002\000\034\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\011\uffde\022\uffde\023\uffde\027\uffde\051\uffde" +
    "\052\uffde\053\uffde\054\uffde\057\uffde\001\002\000\030\004" +
    "\ufff1\007\ufff1\011\ufff1\022\ufff1\023\ufff1\027\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\054\ufff1\057\ufff1\001\002\000\030\004" +
    "\152\007\154\011\137\022\153\023\147\027\211\051\103" +
    "\052\101\053\104\054\106\057\143\001\002\000\030\004" +
    "\uffdc\007\uffdc\011\uffdc\022\uffdc\023\uffdc\027\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\057\uffdc\001\002\000\030\004" +
    "\uffec\007\uffec\011\uffec\022\uffec\023\uffec\027\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\057\uffec\001\002\000\030\004" +
    "\uffef\007\uffef\011\uffef\022\uffef\023\uffef\027\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\057\uffef\001\002\000\030\010" +
    "\026\017\022\024\023\033\033\034\031\035\020\047\025" +
    "\050\027\055\021\056\024\057\030\001\002\000\024\025" +
    "\216\036\043\037\041\040\044\041\035\042\040\043\042" +
    "\044\036\045\037\001\002\000\004\031\uffe1\001\002\000" +
    "\030\004\uffed\007\uffed\011\uffed\022\uffed\023\uffed\027\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\057\uffed\001\002\000" +
    "\004\057\014\001\002\000\004\031\222\001\002\000\030" +
    "\010\026\017\022\024\023\033\033\034\031\035\020\047" +
    "\025\050\027\055\021\056\024\057\030\001\002\000\024" +
    "\031\224\036\043\037\041\040\044\041\035\042\040\043" +
    "\042\044\036\045\037\001\002\000\004\057\014\001\002" +
    "\000\004\025\226\001\002\000\004\026\227\001\002\000" +
    "\030\004\ufff1\007\ufff1\011\ufff1\022\ufff1\023\ufff1\027\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\057\ufff1\001\002\000" +
    "\030\004\152\007\154\011\137\022\153\023\147\027\231" +
    "\051\103\052\101\053\104\054\106\057\143\001\002\000" +
    "\030\004\uffda\007\uffda\011\uffda\022\uffda\023\uffda\027\uffda" +
    "\051\uffda\052\uffda\053\uffda\054\uffda\057\uffda\001\002\000" +
    "\004\015\233\001\002\000\004\057\234\001\002\000\004" +
    "\031\ufff9\001\002\000\022\013\ufffa\014\ufffa\015\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\057\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\016\002\010\003\011\004\007\005\014\011" +
    "\012\024\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\120\001" +
    "\001\000\002\001\001\000\014\004\101\005\014\011\104" +
    "\017\077\024\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\033\013\031\023\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\071\013\031\023\016\025\070\001\001" +
    "\000\010\012\066\013\031\023\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\053\013\031" +
    "\023\016\001\001\000\010\012\052\013\031\023\016\001" +
    "\001\000\010\012\051\013\031\023\016\001\001\000\010" +
    "\012\050\013\031\023\016\001\001\000\010\012\047\013" +
    "\031\023\016\001\001\000\010\012\046\013\031\023\016" +
    "\001\001\000\010\012\045\013\031\023\016\001\001\000" +
    "\010\012\044\013\031\023\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\071\013\031\023\016\025\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\110\013\031" +
    "\023\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\114\013\031\023\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\117\013" +
    "\031\023\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\123\013\031\023\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\135\001\001\000\022\010\141\011\147\013" +
    "\144\014\140\017\154\020\143\021\137\022\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\164" +
    "\013\031\023\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\157\013\031\023\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\162\001\001\000\022\010\141\011\147\013\144\014\140" +
    "\017\154\020\143\021\137\022\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\167" +
    "\013\031\023\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\172\001\001\000\022\010\141\011\147" +
    "\013\144\014\140\017\154\020\143\021\137\022\150\001" +
    "\001\000\004\015\174\001\001\000\004\016\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\201\013\031\023\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\204\001\001\000\022\010" +
    "\141\011\147\013\144\014\140\017\154\020\143\021\137" +
    "\022\150\001\001\000\002\001\001\000\004\007\207\001" +
    "\001\000\022\010\141\011\147\013\144\014\140\017\154" +
    "\020\143\021\137\022\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\214\013\031" +
    "\023\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\220\001\001\000\002\001\001" +
    "\000\010\012\222\013\031\023\016\001\001\000\002\001" +
    "\001\000\004\011\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\227\001\001\000\022\010\141\011" +
    "\147\013\144\014\140\017\154\020\143\021\137\022\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){ this.s = s; }
    public Symbol getS(){ return this.s; }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALOR ::= Corchete_a LISTA_VALORES Corchete_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR ::= None 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALOR ::= False 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALOR ::= True 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR ::= Char 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR ::= Cadena 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALOR ::= NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALOR ::= NumeroEntero 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTA_VALORES ::= EXPRESION Coma LISTA_VALORES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_VALORES ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_VALORES ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= VALOR 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= Input Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= Input Parentesis_a Cadena Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION Potencia EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION Modulo EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION Division EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION Multiplicacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR_LOOP ::= For Parentesis_a ASIGNACION PuntoComa EXPRESION PuntoComa ASIGNACION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FOR_LOOP",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // WHILE_LOOP ::= While Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("WHILE_LOOP",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE_BLOQUE ::= Else Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELSE_BLOQUE",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSE_BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELSE_BLOQUE",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELIF_BLOQUES ::= ELIF_BLOQUES Elif Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELIF_BLOQUES",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELIF_BLOQUES ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELIF_BLOQUES",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF_STATEMENT ::= If Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c ELIF_BLOQUES ELSE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRINT_STMT ::= Print Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PRINT_STMT",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION ::= Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_TIPADA ::= String Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_TIPADA ::= Bool Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_TIPADA ::= Float Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_TIPADA ::= Int Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= Return EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= FOR_LOOP 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= WHILE_LOOP 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= IF_STATEMENT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= PRINT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= LLAMADA_FUNCION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= DECLARACION_TIPADA PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMS ::= Identificador Coma PARAMS 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= Def Identificador Parentesis_a PARAMS Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORT_STMT ::= Import Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IMPORT_STMT",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORT_STMT ::= From Identificador Import Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IMPORT_STMT",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES ::= IMPORT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES ::= ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= DECLARACIONES IMPORT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACIONES DECLARACION_TIPADA PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DECLARACIONES ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

