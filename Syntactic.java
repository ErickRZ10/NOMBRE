
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 03 21:01:14 GMT-05:00 2025
//----------------------------------------------------

package analizador2;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 03 21:01:14 GMT-05:00 2025
  */
public class Syntactic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\004\000\002" +
    "\025\006\000\002\025\004\000\002\005\003\000\002\005" +
    "\004\000\002\006\012\000\002\006\012\000\002\007\002" +
    "\000\002\007\003\000\002\007\005\000\002\010\002\000" +
    "\002\010\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\005\000\002\011\004" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\012\005\000\002\014\006\000\002" +
    "\023\006\000\002\015\013\000\002\016\002\000\002\016" +
    "\012\000\002\017\002\000\002\017\006\000\002\021\011" +
    "\000\002\022\015\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\013\005\000\002\013\003" +
    "\000\002\013\003\000\002\026\002\000\002\026\003\000" +
    "\002\026\005\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\022\013\010\014\007\015\011\051\013\052" +
    "\006\053\014\054\017\060\015\001\002\000\004\031\240" +
    "\001\002\000\004\031\237\001\002\000\004\060\234\001" +
    "\002\000\004\060\231\001\002\000\006\055\117\060\120" +
    "\001\002\000\004\060\116\001\002\000\024\002\114\013" +
    "\010\014\007\015\011\051\013\052\006\053\014\054\017" +
    "\060\015\001\002\000\004\060\111\001\002\000\004\060" +
    "\106\001\002\000\004\046\104\001\002\000\004\031\103" +
    "\001\002\000\004\060\022\001\002\000\024\002\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\060\ufffe\001\002\000\024\002\000\013\000\014\000\015" +
    "\000\051\000\052\000\053\000\054\000\060\000\001\002" +
    "\000\004\046\023\001\002\000\030\010\034\017\030\024" +
    "\027\033\040\034\036\035\025\047\032\050\033\056\026" +
    "\057\031\060\035\001\002\000\032\021\uffc8\025\uffc8\030" +
    "\uffc8\031\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\001\002\000\032\021\uffbc\025" +
    "\uffbc\030\uffbc\031\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\001\002\000\032\021" +
    "\uffc1\025\uffc1\030\uffc1\031\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\001\002\000" +
    "\030\010\034\017\030\024\027\033\040\034\036\035\025" +
    "\047\032\050\033\056\026\057\031\060\035\001\002\000" +
    "\032\010\034\017\030\021\uffc6\024\027\033\040\034\036" +
    "\035\025\047\032\050\033\056\026\057\031\060\035\001" +
    "\002\000\032\021\uffc0\025\uffc0\030\uffc0\031\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\001\002\000\032\021\uffc3\025\uffc3\030\uffc3\031\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\001\002\000\032\021\uffc2\025\uffc2\030\uffc2" +
    "\031\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\001\002\000\004\024\070\001\002" +
    "\000\034\021\uffbf\024\062\025\uffbf\030\uffbf\031\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\001\002\000\032\021\uffbd\025\uffbd\030\uffbd\031" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\001\002\000\032\021\uffc7\025\uffc7\030" +
    "\uffc7\031\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\001\002\000\032\021\uffbe\025" +
    "\uffbe\030\uffbe\031\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\001\002\000\024\031" +
    "\uffde\036\047\037\046\040\051\041\042\042\045\043\050" +
    "\044\043\045\044\001\002\000\030\010\034\017\030\024" +
    "\027\033\040\034\036\035\025\047\032\050\033\056\026" +
    "\057\031\060\035\001\002\000\030\010\034\017\030\024" +
    "\027\033\040\034\036\035\025\047\032\050\033\056\026" +
    "\057\031\060\035\001\002\000\030\010\034\017\030\024" +
    "\027\033\040\034\036\035\025\047\032\050\033\056\026" +
    "\057\031\060\035\001\002\000\030\010\034\017\030\024" +
    "\027\033\040\034\036\035\025\047\032\050\033\056\026" +
    "\057\031\060\035\001\002\000\030\010\034\017\030\024" +
    "\027\033\040\034\036\035\025\047\032\050\033\056\026" +
    "\057\031\060\035\001\002\000\030\010\034\017\030\024" +
    "\027\033\040\034\036\035\025\047\032\050\033\056\026" +
    "\057\031\060\035\001\002\000\030\010\034\017\030\024" +
    "\027\033\040\034\036\035\025\047\032\050\033\056\026" +
    "\057\031\060\035\001\002\000\030\010\034\017\030\024" +
    "\027\033\040\034\036\035\025\047\032\050\033\056\026" +
    "\057\031\060\035\001\002\000\032\021\uffd1\025\uffd1\030" +
    "\uffd1\031\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\050\044\uffd1\045\uffd1\001\002\000\032\021\uffce\025" +
    "\uffce\030\uffce\031\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\050\044\uffce\045\uffce\001\002\000\032\021" +
    "\uffd3\025\uffd3\030\uffd3\031\uffd3\036\uffd3\037\uffd3\040\051" +
    "\041\042\042\045\043\050\044\uffd3\045\uffd3\001\002\000" +
    "\032\021\uffd2\025\uffd2\030\uffd2\031\uffd2\036\uffd2\037\uffd2" +
    "\040\051\041\042\042\045\043\050\044\uffd2\045\uffd2\001" +
    "\002\000\032\021\uffcf\025\uffcf\030\uffcf\031\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\050\044\uffcf\045" +
    "\uffcf\001\002\000\032\021\uffcd\025\uffcd\030\uffcd\031\uffcd" +
    "\036\047\037\046\040\051\041\042\042\045\043\050\044" +
    "\uffcd\045\uffcd\001\002\000\032\021\uffcc\025\uffcc\030\uffcc" +
    "\031\uffcc\036\047\037\046\040\051\041\042\042\045\043" +
    "\050\044\uffcc\045\044\001\002\000\032\021\uffd0\025\uffd0" +
    "\030\uffd0\031\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\050\044\uffd0\045\uffd0\001\002\000\032\010\034" +
    "\017\030\024\027\025\uffef\033\040\034\036\035\025\047" +
    "\032\050\033\056\026\057\031\060\035\001\002\000\004" +
    "\025\067\001\002\000\026\025\uffee\030\065\036\047\037" +
    "\046\040\051\041\042\042\045\043\050\044\043\045\044" +
    "\001\002\000\032\010\034\017\030\024\027\025\uffef\033" +
    "\040\034\036\035\025\047\032\050\033\056\026\057\031" +
    "\060\035\001\002\000\004\025\uffed\001\002\000\032\021" +
    "\uffdc\025\uffdc\030\uffdc\031\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\001\002\000" +
    "\006\025\072\056\071\001\002\000\004\025\073\001\002" +
    "\000\032\021\uffc9\025\uffc9\030\uffc9\031\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\001\002\000\032\021\uffca\025\uffca\030\uffca\031\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\001\002\000\004\021\100\001\002\000\026\021" +
    "\uffc5\030\076\036\047\037\046\040\051\041\042\042\045" +
    "\043\050\044\043\045\044\001\002\000\032\010\034\017" +
    "\030\021\uffc6\024\027\033\040\034\036\035\025\047\032" +
    "\050\033\056\026\057\031\060\035\001\002\000\004\021" +
    "\uffc4\001\002\000\032\021\uffbb\025\uffbb\030\uffbb\031\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\001\002\000\024\025\102\036\047\037\046" +
    "\040\051\041\042\042\045\043\050\044\043\045\044\001" +
    "\002\000\032\021\uffcb\025\uffcb\030\uffcb\031\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\001\002\000\024\002\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\060\ufffd\001\002\000" +
    "\030\010\034\017\030\024\027\033\040\034\036\035\025" +
    "\047\032\050\033\056\026\057\031\060\035\001\002\000" +
    "\026\025\uffdd\031\uffdd\036\047\037\046\040\051\041\042" +
    "\042\045\043\050\044\043\045\044\001\002\000\004\046" +
    "\107\001\002\000\030\010\034\017\030\024\027\033\040" +
    "\034\036\035\025\047\032\050\033\056\026\057\031\060" +
    "\035\001\002\000\024\031\uffdf\036\047\037\046\040\051" +
    "\041\042\042\045\043\050\044\043\045\044\001\002\000" +
    "\004\046\112\001\002\000\030\010\034\017\030\024\027" +
    "\033\040\034\036\035\025\047\032\050\033\056\026\057" +
    "\031\060\035\001\002\000\024\031\uffe1\036\047\037\046" +
    "\040\051\041\042\042\045\043\050\044\043\045\044\001" +
    "\002\000\004\002\001\001\002\000\024\002\uffff\013\uffff" +
    "\014\uffff\015\uffff\051\uffff\052\uffff\053\uffff\054\uffff\060" +
    "\uffff\001\002\000\004\031\ufff4\001\002\000\004\024\223" +
    "\001\002\000\004\024\121\001\002\000\032\010\034\017" +
    "\030\024\027\025\uffef\033\040\034\036\035\025\047\032" +
    "\050\033\056\026\057\031\060\035\001\002\000\004\025" +
    "\123\001\002\000\004\026\124\001\002\000\032\004\uffec" +
    "\007\uffec\011\uffec\022\uffec\023\uffec\027\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\060\uffec\061\uffec\001\002\000\032" +
    "\004\142\007\144\011\126\022\143\023\137\027\136\051" +
    "\013\052\006\053\014\054\017\060\133\061\132\001\002" +
    "\000\004\024\211\001\002\000\032\004\uffe4\007\uffe4\011" +
    "\uffe4\022\uffe4\023\uffe4\027\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\060\uffe4\061\uffe4\001\002\000\032\004\uffe6\007" +
    "\uffe6\011\uffe6\022\uffe6\023\uffe6\027\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\060\uffe6\061\uffe6\001\002\000\032\004" +
    "\uffeb\007\uffeb\011\uffeb\022\uffeb\023\uffeb\027\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\060\uffeb\061\uffeb\001\002\000" +
    "\004\031\210\001\002\000\006\024\062\046\104\001\002" +
    "\000\032\004\uffe5\007\uffe5\011\uffe5\022\uffe5\023\uffe5\027" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\060\uffe5\061\uffe5" +
    "\001\002\000\004\031\207\001\002\000\024\002\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1" +
    "\060\ufff1\001\002\000\004\024\204\001\002\000\004\031" +
    "\203\001\002\000\004\031\202\001\002\000\004\024\157" +
    "\001\002\000\030\010\034\017\030\024\027\033\040\034" +
    "\036\035\025\047\032\050\033\056\026\057\031\060\035" +
    "\001\002\000\004\024\147\001\002\000\004\031\146\001" +
    "\002\000\032\004\uffe9\007\uffe9\011\uffe9\022\uffe9\023\uffe9" +
    "\027\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\060\uffe9\061" +
    "\uffe9\001\002\000\030\010\034\017\030\024\027\033\040" +
    "\034\036\035\025\047\032\050\033\056\026\057\031\060" +
    "\035\001\002\000\024\025\151\036\047\037\046\040\051" +
    "\041\042\042\045\043\050\044\043\045\044\001\002\000" +
    "\004\026\152\001\002\000\032\004\uffec\007\uffec\011\uffec" +
    "\022\uffec\023\uffec\027\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\060\uffec\061\uffec\001\002\000\032\004\142\007\144" +
    "\011\126\022\143\023\137\027\154\051\013\052\006\053" +
    "\014\054\017\060\133\061\132\001\002\000\032\004\uffd5" +
    "\007\uffd5\011\uffd5\022\uffd5\023\uffd5\027\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\060\uffd5\061\uffd5\001\002\000\024" +
    "\031\156\036\047\037\046\040\051\041\042\042\045\043" +
    "\050\044\043\045\044\001\002\000\032\004\uffe3\007\uffe3" +
    "\011\uffe3\022\uffe3\023\uffe3\027\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\060\uffe3\061\uffe3\001\002\000\030\010\034" +
    "\017\030\024\027\033\040\034\036\035\025\047\032\050" +
    "\033\056\026\057\031\060\035\001\002\000\024\025\161" +
    "\036\047\037\046\040\051\041\042\042\045\043\050\044" +
    "\043\045\044\001\002\000\004\026\162\001\002\000\032" +
    "\004\uffec\007\uffec\011\uffec\022\uffec\023\uffec\027\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\060\uffec\061\uffec\001\002" +
    "\000\032\004\142\007\144\011\126\022\143\023\137\027" +
    "\164\051\013\052\006\053\014\054\017\060\133\061\132" +
    "\001\002\000\036\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011" +
    "\uffd9\022\uffd9\023\uffd9\027\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\054\uffd9\060\uffd9\061\uffd9\001\002\000\036\004\uffd7\005" +
    "\170\006\167\007\uffd7\011\uffd7\022\uffd7\023\uffd7\027\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\060\uffd7\061\uffd7\001" +
    "\002\000\032\004\uffda\007\uffda\011\uffda\022\uffda\023\uffda" +
    "\027\uffda\051\uffda\052\uffda\053\uffda\054\uffda\060\uffda\061" +
    "\uffda\001\002\000\004\026\177\001\002\000\004\024\171" +
    "\001\002\000\030\010\034\017\030\024\027\033\040\034" +
    "\036\035\025\047\032\050\033\056\026\057\031\060\035" +
    "\001\002\000\024\025\173\036\047\037\046\040\051\041" +
    "\042\042\045\043\050\044\043\045\044\001\002\000\004" +
    "\026\174\001\002\000\032\004\uffec\007\uffec\011\uffec\022" +
    "\uffec\023\uffec\027\uffec\051\uffec\052\uffec\053\uffec\054\uffec" +
    "\060\uffec\061\uffec\001\002\000\032\004\142\007\144\011" +
    "\126\022\143\023\137\027\176\051\013\052\006\053\014" +
    "\054\017\060\133\061\132\001\002\000\036\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\011\uffd8\022\uffd8\023\uffd8\027\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\060\uffd8\061\uffd8\001" +
    "\002\000\032\004\uffec\007\uffec\011\uffec\022\uffec\023\uffec" +
    "\027\uffec\051\uffec\052\uffec\053\uffec\054\uffec\060\uffec\061" +
    "\uffec\001\002\000\032\004\142\007\144\011\126\022\143" +
    "\023\137\027\201\051\013\052\006\053\014\054\017\060" +
    "\133\061\132\001\002\000\032\004\uffd6\007\uffd6\011\uffd6" +
    "\022\uffd6\023\uffd6\027\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\060\uffd6\061\uffd6\001\002\000\032\004\uffe7\007\uffe7" +
    "\011\uffe7\022\uffe7\023\uffe7\027\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\060\uffe7\061\uffe7\001\002\000\032\004\uffea" +
    "\007\uffea\011\uffea\022\uffea\023\uffea\027\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\060\uffea\061\uffea\001\002\000\030" +
    "\010\034\017\030\024\027\033\040\034\036\035\025\047" +
    "\032\050\033\056\026\057\031\060\035\001\002\000\024" +
    "\025\206\036\047\037\046\040\051\041\042\042\045\043" +
    "\050\044\043\045\044\001\002\000\004\031\uffdb\001\002" +
    "\000\032\004\uffe8\007\uffe8\011\uffe8\022\uffe8\023\uffe8\027" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\060\uffe8\061\uffe8" +
    "\001\002\000\032\004\uffe2\007\uffe2\011\uffe2\022\uffe2\023" +
    "\uffe2\027\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\060\uffe2" +
    "\061\uffe2\001\002\000\004\060\015\001\002\000\004\031" +
    "\213\001\002\000\030\010\034\017\030\024\027\033\040" +
    "\034\036\035\025\047\032\050\033\056\026\057\031\060" +
    "\035\001\002\000\024\031\215\036\047\037\046\040\051" +
    "\041\042\042\045\043\050\044\043\045\044\001\002\000" +
    "\004\060\015\001\002\000\004\025\217\001\002\000\004" +
    "\026\220\001\002\000\032\004\uffec\007\uffec\011\uffec\022" +
    "\uffec\023\uffec\027\uffec\051\uffec\052\uffec\053\uffec\054\uffec" +
    "\060\uffec\061\uffec\001\002\000\032\004\142\007\144\011" +
    "\126\022\143\023\137\027\222\051\013\052\006\053\014" +
    "\054\017\060\133\061\132\001\002\000\032\004\uffd4\007" +
    "\uffd4\011\uffd4\022\uffd4\023\uffd4\027\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\060\uffd4\061\uffd4\001\002\000\032\010" +
    "\034\017\030\024\027\025\uffef\033\040\034\036\035\025" +
    "\047\032\050\033\056\026\057\031\060\035\001\002\000" +
    "\004\025\225\001\002\000\004\026\226\001\002\000\032" +
    "\004\uffec\007\uffec\011\uffec\022\uffec\023\uffec\027\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\060\uffec\061\uffec\001\002" +
    "\000\032\004\142\007\144\011\126\022\143\023\137\027" +
    "\230\051\013\052\006\053\014\054\017\060\133\061\132" +
    "\001\002\000\024\002\ufff0\013\ufff0\014\ufff0\015\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\060\ufff0\001\002\000\004" +
    "\015\232\001\002\000\004\060\233\001\002\000\004\031" +
    "\ufff5\001\002\000\004\046\235\001\002\000\030\010\034" +
    "\017\030\024\027\033\040\034\036\035\025\047\032\050" +
    "\033\056\026\057\031\060\035\001\002\000\024\031\uffe0" +
    "\036\047\037\046\040\051\041\042\042\045\043\050\044" +
    "\043\045\044\001\002\000\024\002\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\060\ufffc\001" +
    "\002\000\024\002\ufffb\013\ufffb\014\ufffb\015\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\060\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\016\002\011\003\020\006\017\012\015\020" +
    "\004\025\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\114\006\017\012\015\020\004" +
    "\025\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\040\014\036\024\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\100\014\036\024" +
    "\023\001\001\000\012\013\074\014\036\024\023\026\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\060\014\036\024\023\001\001\000\010\013\057" +
    "\014\036\024\023\001\001\000\010\013\056\014\036\024" +
    "\023\001\001\000\010\013\055\014\036\024\023\001\001" +
    "\000\010\013\054\014\036\024\023\001\001\000\010\013" +
    "\053\014\036\024\023\001\001\000\010\013\052\014\036" +
    "\024\023\001\001\000\010\013\051\014\036\024\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\062\013\063" +
    "\014\036\024\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\065\013\063\014\036\024\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\074\014\036\024" +
    "\023\026\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\104\014\036\024\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\107\014\036\024\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\112" +
    "\014\036\024\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\121\013\063\014\036\024" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\124\001\001\000\022\011\130\012\137\014\134\015" +
    "\127\020\144\021\133\022\126\023\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\154\014\036\024\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\147\014\036" +
    "\024\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\152\001\001\000\022\011\130\012\137\014\134" +
    "\015\127\020\144\021\133\022\126\023\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\157\014\036\024\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\162\001\001\000\022\011\130" +
    "\012\137\014\134\015\127\020\144\021\133\022\126\023" +
    "\140\001\001\000\004\016\164\001\001\000\004\017\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\171\014\036\024\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\174\001\001\000" +
    "\022\011\130\012\137\014\134\015\127\020\144\021\133" +
    "\022\126\023\140\001\001\000\002\001\001\000\004\010" +
    "\177\001\001\000\022\011\130\012\137\014\134\015\127" +
    "\020\144\021\133\022\126\023\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\204" +
    "\014\036\024\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\211" +
    "\001\001\000\002\001\001\000\010\013\213\014\036\024" +
    "\023\001\001\000\002\001\001\000\004\012\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\220\001" +
    "\001\000\022\011\130\012\137\014\134\015\127\020\144" +
    "\021\133\022\126\023\140\001\001\000\002\001\001\000" +
    "\012\007\223\013\063\014\036\024\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\226\001\001\000" +
    "\022\011\130\012\137\014\134\015\127\020\144\021\133" +
    "\022\126\023\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\235\014\036\024\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){ this.s = s; }
    public Symbol getS(){ return this.s; }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALOR ::= Corchete_a LISTA_VALORES Corchete_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALOR ::= None 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALOR ::= False 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALOR ::= True 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALOR ::= Char 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALOR ::= Cadena 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR ::= NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALOR ::= NumeroEntero 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA_VALORES ::= EXPRESION Coma LISTA_VALORES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_VALORES ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_VALORES ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= VALOR 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= Input Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= Input Parentesis_a Cadena Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION Potencia EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION Modulo EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION Division EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION Multiplicacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOR_LOOP ::= For Parentesis_a ASIGNACION PuntoComa EXPRESION PuntoComa ASIGNACION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FOR_LOOP",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WHILE_LOOP ::= While Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("WHILE_LOOP",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSE_BLOQUE ::= Else Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELSE_BLOQUE",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSE_BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELSE_BLOQUE",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELIF_BLOQUES ::= ELIF_BLOQUES Elif Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELIF_BLOQUES",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELIF_BLOQUES ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELIF_BLOQUES",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF_STATEMENT ::= If Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c ELIF_BLOQUES ELSE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PRINT_STMT ::= Print Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PRINT_STMT",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_TIPADA ::= String Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_TIPADA ::= Bool Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_TIPADA ::= Float Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_TIPADA ::= Int Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= Return EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= FOR_LOOP 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= WHILE_LOOP 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= IF_STATEMENT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= PRINT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= LLAMADA_FUNCION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= DECLARACION_TIPADA PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= EXPRESION Coma PARAMS 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION ::= Def Main Parentesis_a PARAMS Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= Def Identificador Parentesis_a PARAMS Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IMPORT_STMT ::= Import Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IMPORT_STMT",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IMPORT_STMT ::= From Identificador Import Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IMPORT_STMT",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= IMPORT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES ::= DECLARACIONES IMPORT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES ::= DECLARACIONES DECLARACION_TIPADA PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES ::= DECLARACIONES ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE ::= IMPORT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE ::= DECLARACION_TIPADA PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE ::= ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO BLOQUE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= BLOQUE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

