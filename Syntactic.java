
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 17 01:48:55 GMT-05:00 2025
//----------------------------------------------------

package analizador2;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 17 01:48:55 GMT-05:00 2025
  */
public class Syntactic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\002" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\004\000\002\027\006\000\002" +
    "\027\004\000\002\007\003\000\002\007\004\000\002\006" +
    "\012\000\002\010\012\000\002\011\002\000\002\011\003" +
    "\000\002\011\005\000\002\012\002\000\002\012\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\005\000\002\013\004\000\002\022\005" +
    "\000\002\022\010\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\007\000\002\022\007\000\002\022\007\000\002\022" +
    "\007\000\002\022\007\000\002\022\007\000\002\031\004" +
    "\000\002\031\002\000\002\032\006\000\002\032\002\000" +
    "\002\014\005\000\002\014\010\000\002\016\006\000\002" +
    "\025\006\000\002\017\013\000\002\020\002\000\002\020" +
    "\012\000\002\021\002\000\002\021\006\000\002\023\011" +
    "\000\002\024\015\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\004\000\002\015\006\000\002\015\005" +
    "\000\002\015\003\000\002\015\003\000\002\030\002\000" +
    "\002\030\003\000\002\030\005\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\012\013\ufffe\014\011\015\006\063\012\001" +
    "\002\000\030\013\uffff\014\011\015\006\051\136\052\130" +
    "\053\142\054\150\055\143\056\134\057\152\063\012\001" +
    "\002\000\004\031\317\001\002\000\004\063\316\001\002" +
    "\000\004\013\110\001\002\000\004\031\107\001\002\000" +
    "\004\063\104\001\002\000\006\017\016\046\015\001\002" +
    "\000\004\002\014\001\002\000\004\002\001\001\002\000" +
    "\032\010\026\017\022\024\023\033\033\034\031\035\020" +
    "\037\035\047\025\050\027\061\021\062\024\063\030\001" +
    "\002\000\032\010\026\017\022\024\023\033\033\034\031" +
    "\035\020\037\035\047\025\050\027\061\021\062\024\063" +
    "\030\001\002\000\032\021\uffba\025\uffba\030\uffba\031\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\045\uffba\001\002\000\032\021\uffae\025\uffae\030\uffae" +
    "\031\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\001\002\000\032\021\uffb3\025\uffb3" +
    "\030\uffb3\031\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\001\002\000\034\010\026" +
    "\017\022\021\uffb8\024\023\033\033\034\031\035\020\037" +
    "\035\047\025\050\027\061\021\062\024\063\030\001\002" +
    "\000\032\010\026\017\022\024\023\033\033\034\031\035" +
    "\020\037\035\047\025\050\027\061\021\062\024\063\030" +
    "\001\002\000\032\021\uffb2\025\uffb2\030\uffb2\031\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\001\002\000\032\021\uffb5\025\uffb5\030\uffb5\031" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\001\002\000\004\024\070\001\002\000" +
    "\032\021\uffb4\025\uffb4\030\uffb4\031\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\001" +
    "\002\000\034\021\uffb1\024\062\025\uffb1\030\uffb1\031\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\001\002\000\032\021\uffaf\025\uffaf\030\uffaf" +
    "\031\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\001\002\000\032\021\uffb9\025\uffb9" +
    "\030\uffb9\031\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\001\002\000\032\021\uffb0" +
    "\025\uffb0\030\uffb0\031\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\001\002\000\024" +
    "\021\057\036\045\037\043\040\046\041\037\042\042\043" +
    "\044\044\040\045\041\001\002\000\032\010\026\017\022" +
    "\024\023\033\033\034\031\035\020\037\035\047\025\050" +
    "\027\061\021\062\024\063\030\001\002\000\032\021\uffbd" +
    "\025\uffbd\030\uffbd\031\uffbd\036\uffbd\037\uffbd\040\046\041" +
    "\037\042\042\043\044\044\uffbd\045\uffbd\001\002\000\032" +
    "\010\026\017\022\024\023\033\033\034\031\035\020\037" +
    "\035\047\025\050\027\061\021\062\024\063\030\001\002" +
    "\000\032\010\026\017\022\024\023\033\033\034\031\035" +
    "\020\037\035\047\025\050\027\061\021\062\024\063\030" +
    "\001\002\000\032\010\026\017\022\024\023\033\033\034" +
    "\031\035\020\037\035\047\025\050\027\061\021\062\024" +
    "\063\030\001\002\000\032\010\026\017\022\024\023\033" +
    "\033\034\031\035\020\037\035\047\025\050\027\061\021" +
    "\062\024\063\030\001\002\000\032\010\026\017\022\024" +
    "\023\033\033\034\031\035\020\037\035\047\025\050\027" +
    "\061\021\062\024\063\030\001\002\000\032\010\026\017" +
    "\022\024\023\033\033\034\031\035\020\037\035\047\025" +
    "\050\027\061\021\062\024\063\030\001\002\000\032\010" +
    "\026\017\022\024\023\033\033\034\031\035\020\037\035" +
    "\047\025\050\027\061\021\062\024\063\030\001\002\000" +
    "\032\010\026\017\022\024\023\033\033\034\031\035\020" +
    "\037\035\047\025\050\027\061\021\062\024\063\030\001" +
    "\002\000\032\021\uffc4\025\uffc4\030\uffc4\031\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\044\044\uffc4\045" +
    "\uffc4\001\002\000\032\021\uffc6\025\uffc6\030\uffc6\031\uffc6" +
    "\036\uffc6\037\uffc6\040\046\041\037\042\042\043\044\044" +
    "\uffc6\045\uffc6\001\002\000\032\021\uffc1\025\uffc1\030\uffc1" +
    "\031\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\044\044\uffc1\045\uffc1\001\002\000\032\021\uffc5\025\uffc5" +
    "\030\uffc5\031\uffc5\036\uffc5\037\uffc5\040\046\041\037\042" +
    "\042\043\044\044\uffc5\045\uffc5\001\002\000\032\021\uffc2" +
    "\025\uffc2\030\uffc2\031\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\044\044\uffc2\045\uffc2\001\002\000\032" +
    "\021\uffc0\025\uffc0\030\uffc0\031\uffc0\036\045\037\043\040" +
    "\046\041\037\042\042\043\044\044\uffc0\045\uffc0\001\002" +
    "\000\032\021\uffbf\025\uffbf\030\uffbf\031\uffbf\036\045\037" +
    "\043\040\046\041\037\042\042\043\044\044\uffbf\045\041" +
    "\001\002\000\032\021\uffc3\025\uffc3\030\uffc3\031\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\044\044\uffc3" +
    "\045\uffc3\001\002\000\004\046\060\001\002\000\032\010" +
    "\026\017\022\024\023\033\033\034\031\035\020\037\035" +
    "\047\025\050\027\061\021\062\024\063\030\001\002\000" +
    "\026\025\uffd0\031\uffd0\036\045\037\043\040\046\041\037" +
    "\042\042\043\044\044\040\045\041\001\002\000\034\010" +
    "\026\017\022\024\023\025\ufff0\033\033\034\031\035\020" +
    "\037\035\047\025\050\027\061\021\062\024\063\030\001" +
    "\002\000\004\025\067\001\002\000\026\025\uffef\030\065" +
    "\036\045\037\043\040\046\041\037\042\042\043\044\044" +
    "\040\045\041\001\002\000\034\010\026\017\022\024\023" +
    "\025\ufff0\033\033\034\031\035\020\037\035\047\025\050" +
    "\027\061\021\062\024\063\030\001\002\000\004\025\uffee" +
    "\001\002\000\032\021\uffcf\025\uffcf\030\uffcf\031\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\001\002\000\006\025\072\061\071\001\002\000" +
    "\004\025\073\001\002\000\032\021\uffbb\025\uffbb\030\uffbb" +
    "\031\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\001\002\000\032\021\uffbc\025\uffbc" +
    "\030\uffbc\031\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\001\002\000\024\025\075" +
    "\036\045\037\043\040\046\041\037\042\042\043\044\044" +
    "\040\045\041\001\002\000\032\021\uffbe\025\uffbe\030\uffbe" +
    "\031\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\001\002\000\004\021\102\001\002" +
    "\000\026\021\uffb7\030\100\036\045\037\043\040\046\041" +
    "\037\042\042\043\044\044\040\045\041\001\002\000\034" +
    "\010\026\017\022\021\uffb8\024\023\033\033\034\031\035" +
    "\020\037\035\047\025\050\027\061\021\062\024\063\030" +
    "\001\002\000\004\021\uffb6\001\002\000\032\021\uffad\025" +
    "\uffad\030\uffad\031\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\001\002\000\026\025" +
    "\uffd1\031\uffd1\036\045\037\043\040\046\041\037\042\042" +
    "\043\044\044\040\045\041\001\002\000\004\015\105\001" +
    "\002\000\004\063\106\001\002\000\004\031\ufff6\001\002" +
    "\000\030\013\ufff7\014\ufff7\015\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\063\ufff7\001\002" +
    "\000\004\060\307\001\002\000\006\002\ufffc\013\113\001" +
    "\002\000\004\002\000\001\002\000\004\063\117\001\002" +
    "\000\006\002\ufff4\013\ufff4\001\002\000\006\002\ufffd\013" +
    "\113\001\002\000\006\002\ufff3\013\ufff3\001\002\000\004" +
    "\024\120\001\002\000\034\010\026\017\022\024\023\025" +
    "\ufff0\033\033\034\031\035\020\037\035\047\025\050\027" +
    "\061\021\062\024\063\030\001\002\000\004\025\122\001" +
    "\002\000\004\026\123\001\002\000\040\004\uffed\007\uffed" +
    "\011\uffed\022\uffed\023\uffed\027\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\063\uffed\064\uffed" +
    "\001\002\000\040\004\146\007\151\011\125\022\147\023" +
    "\141\027\140\051\136\052\130\053\142\054\150\055\143" +
    "\056\134\057\152\063\133\064\132\001\002\000\004\024" +
    "\275\001\002\000\040\004\uffe5\007\uffe5\011\uffe5\022\uffe5" +
    "\023\uffe5\027\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\063\uffe5\064\uffe5\001\002\000\040" +
    "\004\uffe7\007\uffe7\011\uffe7\022\uffe7\023\uffe7\027\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\063\uffe7\064\uffe7\001\002\000\004\063\273\001\002\000" +
    "\040\004\uffec\007\uffec\011\uffec\022\uffec\023\uffec\027\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\063\uffec\064\uffec\001\002\000\004\031\272\001\002" +
    "\000\010\017\016\024\062\046\015\001\002\000\004\063" +
    "\270\001\002\000\040\004\uffe6\007\uffe6\011\uffe6\022\uffe6" +
    "\023\uffe6\027\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\063\uffe6\064\uffe6\001\002\000\004" +
    "\063\256\001\002\000\004\031\255\001\002\000\006\002" +
    "\ufff1\013\ufff1\001\002\000\004\024\252\001\002\000\016" +
    "\051\226\052\225\054\227\055\224\056\222\057\223\001" +
    "\002\000\004\063\220\001\002\000\004\031\217\001\002" +
    "\000\004\031\216\001\002\000\004\024\173\001\002\000" +
    "\032\010\026\017\022\024\023\033\033\034\031\035\020" +
    "\037\035\047\025\050\027\061\021\062\024\063\030\001" +
    "\002\000\004\063\167\001\002\000\004\024\161\001\002" +
    "\000\004\063\155\001\002\000\004\031\154\001\002\000" +
    "\040\004\uffea\007\uffea\011\uffea\022\uffea\023\uffea\027\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\063\uffea\064\uffea\001\002\000\006\031\uffd4\046\156" +
    "\001\002\000\032\010\026\017\022\024\023\033\033\034" +
    "\031\035\020\037\035\047\025\050\027\061\021\062\024" +
    "\063\030\001\002\000\004\031\uffde\001\002\000\024\031" +
    "\uffd5\036\045\037\043\040\046\041\037\042\042\043\044" +
    "\044\040\045\041\001\002\000\032\010\026\017\022\024" +
    "\023\033\033\034\031\035\020\037\035\047\025\050\027" +
    "\061\021\062\024\063\030\001\002\000\024\025\163\036" +
    "\045\037\043\040\046\041\037\042\042\043\044\044\040" +
    "\045\041\001\002\000\004\026\164\001\002\000\040\004" +
    "\uffed\007\uffed\011\uffed\022\uffed\023\uffed\027\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\063" +
    "\uffed\064\uffed\001\002\000\040\004\146\007\151\011\125" +
    "\022\147\023\141\027\166\051\136\052\130\053\142\054" +
    "\150\055\143\056\134\057\152\063\133\064\132\001\002" +
    "\000\040\004\uffc8\007\uffc8\011\uffc8\022\uffc8\023\uffc8\027" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\063\uffc8\064\uffc8\001\002\000\006\031\uffd4\046" +
    "\156\001\002\000\004\031\uffdf\001\002\000\024\031\172" +
    "\036\045\037\043\040\046\041\037\042\042\043\044\044" +
    "\040\045\041\001\002\000\040\004\uffe4\007\uffe4\011\uffe4" +
    "\022\uffe4\023\uffe4\027\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\063\uffe4\064\uffe4\001\002" +
    "\000\032\010\026\017\022\024\023\033\033\034\031\035" +
    "\020\037\035\047\025\050\027\061\021\062\024\063\030" +
    "\001\002\000\024\025\175\036\045\037\043\040\046\041" +
    "\037\042\042\043\044\044\040\045\041\001\002\000\004" +
    "\026\176\001\002\000\040\004\uffed\007\uffed\011\uffed\022" +
    "\uffed\023\uffed\027\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\057\uffed\063\uffed\064\uffed\001\002\000" +
    "\040\004\146\007\151\011\125\022\147\023\141\027\200" +
    "\051\136\052\130\053\142\054\150\055\143\056\134\057" +
    "\152\063\133\064\132\001\002\000\044\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\011\uffcc\022\uffcc\023\uffcc\027\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc" +
    "\063\uffcc\064\uffcc\001\002\000\044\004\uffca\005\204\006" +
    "\203\007\uffca\011\uffca\022\uffca\023\uffca\027\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\063" +
    "\uffca\064\uffca\001\002\000\040\004\uffcd\007\uffcd\011\uffcd" +
    "\022\uffcd\023\uffcd\027\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\063\uffcd\064\uffcd\001\002" +
    "\000\004\026\213\001\002\000\004\024\205\001\002\000" +
    "\032\010\026\017\022\024\023\033\033\034\031\035\020" +
    "\037\035\047\025\050\027\061\021\062\024\063\030\001" +
    "\002\000\024\025\207\036\045\037\043\040\046\041\037" +
    "\042\042\043\044\044\040\045\041\001\002\000\004\026" +
    "\210\001\002\000\040\004\uffed\007\uffed\011\uffed\022\uffed" +
    "\023\uffed\027\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\056\uffed\057\uffed\063\uffed\064\uffed\001\002\000\040" +
    "\004\146\007\151\011\125\022\147\023\141\027\212\051" +
    "\136\052\130\053\142\054\150\055\143\056\134\057\152" +
    "\063\133\064\132\001\002\000\044\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\011\uffcb\022\uffcb\023\uffcb\027\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\063" +
    "\uffcb\064\uffcb\001\002\000\040\004\uffed\007\uffed\011\uffed" +
    "\022\uffed\023\uffed\027\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\063\uffed\064\uffed\001\002" +
    "\000\040\004\146\007\151\011\125\022\147\023\141\027" +
    "\215\051\136\052\130\053\142\054\150\055\143\056\134" +
    "\057\152\063\133\064\132\001\002\000\040\004\uffc9\007" +
    "\uffc9\011\uffc9\022\uffc9\023\uffc9\027\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\063\uffc9\064" +
    "\uffc9\001\002\000\040\004\uffe8\007\uffe8\011\uffe8\022\uffe8" +
    "\023\uffe8\027\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\063\uffe8\064\uffe8\001\002\000\040" +
    "\004\uffeb\007\uffeb\011\uffeb\022\uffeb\023\uffeb\027\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\063\uffeb\064\uffeb\001\002\000\006\031\uffd4\046\156\001" +
    "\002\000\004\031\uffdd\001\002\000\004\063\247\001\002" +
    "\000\004\063\244\001\002\000\004\063\241\001\002\000" +
    "\004\063\236\001\002\000\004\063\233\001\002\000\004" +
    "\063\230\001\002\000\004\046\231\001\002\000\032\010" +
    "\026\017\022\024\023\033\033\034\031\035\020\037\035" +
    "\047\025\050\027\061\021\062\024\063\030\001\002\000" +
    "\024\031\uffd8\036\045\037\043\040\046\041\037\042\042" +
    "\043\044\044\040\045\041\001\002\000\004\046\234\001" +
    "\002\000\032\010\026\017\022\024\023\033\033\034\031" +
    "\035\020\037\035\047\025\050\027\061\021\062\024\063" +
    "\030\001\002\000\024\031\uffda\036\045\037\043\040\046" +
    "\041\037\042\042\043\044\044\040\045\041\001\002\000" +
    "\004\046\237\001\002\000\032\010\026\017\022\024\023" +
    "\033\033\034\031\035\020\037\035\047\025\050\027\061" +
    "\021\062\024\063\030\001\002\000\024\031\uffd9\036\045" +
    "\037\043\040\046\041\037\042\042\043\044\044\040\045" +
    "\041\001\002\000\004\046\242\001\002\000\032\010\026" +
    "\017\022\024\023\033\033\034\031\035\020\037\035\047" +
    "\025\050\027\061\021\062\024\063\030\001\002\000\024" +
    "\031\uffdb\036\045\037\043\040\046\041\037\042\042\043" +
    "\044\044\040\045\041\001\002\000\004\046\245\001\002" +
    "\000\032\010\026\017\022\024\023\033\033\034\031\035" +
    "\020\037\035\047\025\050\027\061\021\062\024\063\030" +
    "\001\002\000\024\031\uffd7\036\045\037\043\040\046\041" +
    "\037\042\042\043\044\044\040\045\041\001\002\000\004" +
    "\046\250\001\002\000\032\010\026\017\022\024\023\033" +
    "\033\034\031\035\020\037\035\047\025\050\027\061\021" +
    "\062\024\063\030\001\002\000\024\031\uffd6\036\045\037" +
    "\043\040\046\041\037\042\042\043\044\044\040\045\041" +
    "\001\002\000\032\010\026\017\022\024\023\033\033\034" +
    "\031\035\020\037\035\047\025\050\027\061\021\062\024" +
    "\063\030\001\002\000\024\025\254\036\045\037\043\040" +
    "\046\041\037\042\042\043\044\044\040\045\041\001\002" +
    "\000\004\031\uffce\001\002\000\040\004\uffe9\007\uffe9\011" +
    "\uffe9\022\uffe9\023\uffe9\027\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\063\uffe9\064\uffe9\001" +
    "\002\000\010\017\260\031\uffd4\046\156\001\002\000\004" +
    "\031\uffe2\001\002\000\004\047\261\001\002\000\004\021" +
    "\262\001\002\000\006\031\uffd2\046\263\001\002\000\004" +
    "\017\265\001\002\000\004\031\uffe1\001\002\000\034\010" +
    "\026\017\022\021\uffb8\024\023\033\033\034\031\035\020" +
    "\037\035\047\025\050\027\061\021\062\024\063\030\001" +
    "\002\000\004\021\267\001\002\000\004\031\uffd3\001\002" +
    "\000\006\031\uffd4\046\156\001\002\000\004\031\uffdc\001" +
    "\002\000\040\004\uffe3\007\uffe3\011\uffe3\022\uffe3\023\uffe3" +
    "\027\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\063\uffe3\064\uffe3\001\002\000\006\031\uffd4" +
    "\046\156\001\002\000\004\031\uffe0\001\002\000\004\063" +
    "\012\001\002\000\004\031\277\001\002\000\032\010\026" +
    "\017\022\024\023\033\033\034\031\035\020\037\035\047" +
    "\025\050\027\061\021\062\024\063\030\001\002\000\024" +
    "\031\301\036\045\037\043\040\046\041\037\042\042\043" +
    "\044\044\040\045\041\001\002\000\004\063\012\001\002" +
    "\000\004\025\303\001\002\000\004\026\304\001\002\000" +
    "\040\004\uffed\007\uffed\011\uffed\022\uffed\023\uffed\027\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057" +
    "\uffed\063\uffed\064\uffed\001\002\000\040\004\146\007\151" +
    "\011\125\022\147\023\141\027\306\051\136\052\130\053" +
    "\142\054\150\055\143\056\134\057\152\063\133\064\132" +
    "\001\002\000\040\004\uffc7\007\uffc7\011\uffc7\022\uffc7\023" +
    "\uffc7\027\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\063\uffc7\064\uffc7\001\002\000\004\024" +
    "\310\001\002\000\034\010\026\017\022\024\023\025\ufff0" +
    "\033\033\034\031\035\020\037\035\047\025\050\027\061" +
    "\021\062\024\063\030\001\002\000\004\025\312\001\002" +
    "\000\004\026\313\001\002\000\040\004\uffed\007\uffed\011" +
    "\uffed\022\uffed\023\uffed\027\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\063\uffed\064\uffed\001" +
    "\002\000\040\004\146\007\151\011\125\022\147\023\141" +
    "\027\315\051\136\052\130\053\142\054\150\055\143\056" +
    "\134\057\152\063\133\064\132\001\002\000\006\002\ufff2" +
    "\013\ufff2\001\002\000\004\031\ufff5\001\002\000\030\013" +
    "\ufff8\014\ufff8\015\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\063\ufff8\001\002\000\004\031" +
    "\325\001\002\000\004\031\324\001\002\000\004\031\323" +
    "\001\002\000\030\013\ufffb\014\ufffb\015\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\063\ufffb" +
    "\001\002\000\030\013\ufffa\014\ufffa\015\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\063\ufffa" +
    "\001\002\000\030\013\ufff9\014\ufff9\015\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\063\ufff9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\014\002\012\003\006\005\003\014\004\027" +
    "\007\001\001\000\010\014\321\022\320\027\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\102\016" +
    "\031\026\016\001\001\000\010\015\033\016\031\026\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\076\016\031\026\016\030\075\001\001" +
    "\000\010\015\073\016\031\026\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\035\016\031" +
    "\026\016\001\001\000\002\001\001\000\010\015\055\016" +
    "\031\026\016\001\001\000\010\015\054\016\031\026\016" +
    "\001\001\000\010\015\053\016\031\026\016\001\001\000" +
    "\010\015\052\016\031\026\016\001\001\000\010\015\051" +
    "\016\031\026\016\001\001\000\010\015\050\016\031\026" +
    "\016\001\001\000\010\015\047\016\031\026\016\001\001" +
    "\000\010\015\046\016\031\026\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\060\016\031" +
    "\026\016\001\001\000\002\001\001\000\012\011\062\015" +
    "\063\016\031\026\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\065\015\063\016\031\026\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\076\016\031\026\016\030\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\111\007\114" +
    "\010\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\120\015\063\016\031\026" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\123\001\001\000\022\013\130\014\143\016\136\017" +
    "\126\022\152\023\134\024\125\025\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\170\016\031\026\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\156" +
    "\001\001\000\010\015\157\016\031\026\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\161\016\031" +
    "\026\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\164\001\001\000\022\013\130\014\143\016\136" +
    "\017\126\022\152\023\134\024\125\025\144\001\001\000" +
    "\002\001\001\000\004\031\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\173\016" +
    "\031\026\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\176\001\001\000\022\013\130\014\143\016" +
    "\136\017\126\022\152\023\134\024\125\025\144\001\001" +
    "\000\004\020\200\001\001\000\004\021\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\205\016\031\026\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\210\001\001\000\022\013\130" +
    "\014\143\016\136\017\126\022\152\023\134\024\125\025" +
    "\144\001\001\000\002\001\001\000\004\012\213\001\001" +
    "\000\022\013\130\014\143\016\136\017\126\022\152\023" +
    "\134\024\125\025\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\231\016\031\026\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\234\016\031\026\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\237\016\031\026\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\242\016\031" +
    "\026\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\245\016\031\026\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\250\016\031\026\016\001" +
    "\001\000\002\001\001\000\010\015\252\016\031\026\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\076\016\031" +
    "\026\016\030\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\273\001\001\000\002\001\001\000" +
    "\004\014\275\001\001\000\002\001\001\000\010\015\277" +
    "\016\031\026\016\001\001\000\002\001\001\000\004\014" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\304\001\001\000\022\013\130\014\143\016\136\017" +
    "\126\022\152\023\134\024\125\025\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\310\015\063\016" +
    "\031\026\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\313\001\001\000\022\013\130\014\143\016" +
    "\136\017\126\022\152\023\134\024\125\025\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){ this.s = s; }
    public Symbol getS(){ return this.s; }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALOR ::= Corchete_a LISTA_VALORES Corchete_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALOR ::= None 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALOR ::= False 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALOR ::= True 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALOR ::= Char 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALOR ::= Cadena 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR ::= NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR ::= NumeroEntero 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTA_VALORES ::= EXPRESION Coma LISTA_VALORES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LISTA_VALORES ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTA_VALORES ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= VALOR 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= Input Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= Input Parentesis_a Cadena Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION Potencia EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION Modulo EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION Division EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION Multiplicacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR_LOOP ::= For Parentesis_a ASIGNACION PuntoComa EXPRESION PuntoComa ASIGNACION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FOR_LOOP",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WHILE_LOOP ::= While Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("WHILE_LOOP",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE_BLOQUE ::= Else Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELSE_BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSE_BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELSE_BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELIF_BLOQUES ::= ELIF_BLOQUES Elif Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELIF_BLOQUES",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELIF_BLOQUES ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELIF_BLOQUES",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF_STATEMENT ::= If Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c ELIF_BLOQUES ELSE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PRINT_STMT ::= Print Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PRINT_STMT",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= Identificador Corchete_a EXPRESION Corchete_c Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPC_INIT_ARRAY ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_INIT_ARRAY",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPC_INIT_ARRAY ::= Op_asignacion Corchete_a LISTA_VALORES Corchete_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_INIT_ARRAY",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPC_INIT ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_INIT",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPC_INIT ::= Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_INIT",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_TIPADA ::= Const CharType Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_TIPADA ::= Const String Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_TIPADA ::= Const Bool Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_TIPADA ::= Const Float Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_TIPADA ::= Const Int Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_TIPADA ::= Const Double Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_TIPADA ::= CharType Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_TIPADA ::= Double Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_TIPADA ::= String Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_TIPADA ::= Bool Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_TIPADA ::= Float Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_TIPADA ::= Int Identificador Corchete_a NumeroEntero Corchete_c OPC_INIT_ARRAY 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_TIPADA ::= Int Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= Return EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= FOR_LOOP 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= WHILE_LOOP 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= IF_STATEMENT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= PRINT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= LLAMADA_FUNCION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DECLARACION_TIPADA PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= EXPRESION Coma PARAMS 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= Def Identificador Parentesis_a PARAMS Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION_PRINCIPAL ::= Def Main Parentesis_a PARAMS Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCION_PRINCIPAL",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCIONES",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCIONES",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IMPORT_STMT ::= Import Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IMPORT_STMT",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IMPORT_STMT ::= From Identificador Import Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IMPORT_STMT",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= IMPORT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES ::= ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES ::= DECLARACIONES IMPORT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES ::= DECLARACIONES DECLARACION_TIPADA PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES ::= DECLARACIONES ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPC_FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPC_FUNCIONES ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPC_DECL ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_DECL",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OPC_DECL ::= DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_DECL",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= OPC_DECL FUNCION_PRINCIPAL OPC_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

