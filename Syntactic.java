
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 16 16:12:40 GMT-05:00 2025
//----------------------------------------------------

package analizador2;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 16 16:12:40 GMT-05:00 2025
  */
public class Syntactic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\002" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\004\000\002\027\006\000\002" +
    "\027\004\000\002\007\003\000\002\007\004\000\002\006" +
    "\012\000\002\010\012\000\002\011\002\000\002\011\003" +
    "\000\002\011\005\000\002\012\002\000\002\012\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\005\000\002\013\004\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\007\000\002" +
    "\022\007\000\002\022\007\000\002\022\007\000\002\022" +
    "\007\000\002\022\007\000\002\031\004\000\002\031\002" +
    "\000\002\014\005\000\002\016\006\000\002\025\006\000" +
    "\002\017\013\000\002\020\002\000\002\020\012\000\002" +
    "\021\002\000\002\021\006\000\002\023\011\000\002\024" +
    "\015\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\004\000\002\015\006\000\002\015\005\000\002\015" +
    "\003\000\002\015\003\000\002\030\002\000\002\030\003" +
    "\000\002\030\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\012\013\ufffe\014\011\015\006\063\012\001" +
    "\002\000\030\013\uffff\014\011\015\006\051\130\052\123" +
    "\053\135\054\143\055\136\056\131\057\145\063\012\001" +
    "\002\000\004\031\302\001\002\000\004\063\301\001\002" +
    "\000\004\013\103\001\002\000\004\031\102\001\002\000" +
    "\004\063\077\001\002\000\004\046\015\001\002\000\004" +
    "\002\014\001\002\000\004\002\001\001\002\000\032\010" +
    "\026\017\021\024\022\033\032\034\030\035\017\037\034" +
    "\047\024\050\025\061\020\062\023\063\027\001\002\000" +
    "\032\021\uffbe\025\uffbe\030\uffbe\031\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\001" +
    "\002\000\032\021\uffb2\025\uffb2\030\uffb2\031\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\001\002\000\032\021\uffb7\025\uffb7\030\uffb7\031\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\001\002\000\034\010\026\017\021\021\uffbc" +
    "\024\022\033\032\034\030\035\017\037\034\047\024\050" +
    "\025\061\020\062\023\063\027\001\002\000\032\010\026" +
    "\017\021\024\022\033\032\034\030\035\017\037\034\047" +
    "\024\050\025\061\020\062\023\063\027\001\002\000\032" +
    "\021\uffb6\025\uffb6\030\uffb6\031\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\001\002" +
    "\000\032\021\uffb9\025\uffb9\030\uffb9\031\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\001\002\000\032\021\uffb8\025\uffb8\030\uffb8\031\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\001\002\000\004\024\064\001\002\000\034\021" +
    "\uffb5\024\056\025\uffb5\030\uffb5\031\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\001" +
    "\002\000\032\021\uffb3\025\uffb3\030\uffb3\031\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\001\002\000\032\021\uffbd\025\uffbd\030\uffbd\031\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\001\002\000\032\021\uffb4\025\uffb4\030\uffb4" +
    "\031\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\001\002\000\026\025\uffd4\031\uffd4" +
    "\036\043\037\042\040\045\041\036\042\041\043\044\044" +
    "\037\045\040\001\002\000\032\010\026\017\021\024\022" +
    "\033\032\034\030\035\017\037\034\047\024\050\025\061" +
    "\020\062\023\063\027\001\002\000\032\021\uffc1\025\uffc1" +
    "\030\uffc1\031\uffc1\036\uffc1\037\uffc1\040\045\041\036\042" +
    "\041\043\044\044\uffc1\045\uffc1\001\002\000\032\010\026" +
    "\017\021\024\022\033\032\034\030\035\017\037\034\047" +
    "\024\050\025\061\020\062\023\063\027\001\002\000\032" +
    "\010\026\017\021\024\022\033\032\034\030\035\017\037" +
    "\034\047\024\050\025\061\020\062\023\063\027\001\002" +
    "\000\032\010\026\017\021\024\022\033\032\034\030\035" +
    "\017\037\034\047\024\050\025\061\020\062\023\063\027" +
    "\001\002\000\032\010\026\017\021\024\022\033\032\034" +
    "\030\035\017\037\034\047\024\050\025\061\020\062\023" +
    "\063\027\001\002\000\032\010\026\017\021\024\022\033" +
    "\032\034\030\035\017\037\034\047\024\050\025\061\020" +
    "\062\023\063\027\001\002\000\032\010\026\017\021\024" +
    "\022\033\032\034\030\035\017\037\034\047\024\050\025" +
    "\061\020\062\023\063\027\001\002\000\032\010\026\017" +
    "\021\024\022\033\032\034\030\035\017\037\034\047\024" +
    "\050\025\061\020\062\023\063\027\001\002\000\032\010" +
    "\026\017\021\024\022\033\032\034\030\035\017\037\034" +
    "\047\024\050\025\061\020\062\023\063\027\001\002\000" +
    "\032\021\uffc8\025\uffc8\030\uffc8\031\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\044\044\uffc8\045\uffc8\001" +
    "\002\000\032\021\uffc5\025\uffc5\030\uffc5\031\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\044\044\uffc5\045" +
    "\uffc5\001\002\000\032\021\uffca\025\uffca\030\uffca\031\uffca" +
    "\036\uffca\037\uffca\040\045\041\036\042\041\043\044\044" +
    "\uffca\045\uffca\001\002\000\032\021\uffc9\025\uffc9\030\uffc9" +
    "\031\uffc9\036\uffc9\037\uffc9\040\045\041\036\042\041\043" +
    "\044\044\uffc9\045\uffc9\001\002\000\032\021\uffc6\025\uffc6" +
    "\030\uffc6\031\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\044\044\uffc6\045\uffc6\001\002\000\032\021\uffc4" +
    "\025\uffc4\030\uffc4\031\uffc4\036\043\037\042\040\045\041" +
    "\036\042\041\043\044\044\uffc4\045\uffc4\001\002\000\032" +
    "\021\uffc3\025\uffc3\030\uffc3\031\uffc3\036\043\037\042\040" +
    "\045\041\036\042\041\043\044\044\uffc3\045\040\001\002" +
    "\000\032\021\uffc7\025\uffc7\030\uffc7\031\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\044\044\uffc7\045\uffc7" +
    "\001\002\000\034\010\026\017\021\024\022\025\ufff0\033" +
    "\032\034\030\035\017\037\034\047\024\050\025\061\020" +
    "\062\023\063\027\001\002\000\004\025\063\001\002\000" +
    "\026\025\uffef\030\061\036\043\037\042\040\045\041\036" +
    "\042\041\043\044\044\037\045\040\001\002\000\034\010" +
    "\026\017\021\024\022\025\ufff0\033\032\034\030\035\017" +
    "\037\034\047\024\050\025\061\020\062\023\063\027\001" +
    "\002\000\004\025\uffee\001\002\000\032\021\uffd3\025\uffd3" +
    "\030\uffd3\031\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\001\002\000\006\025\065" +
    "\061\066\001\002\000\032\021\uffbf\025\uffbf\030\uffbf\031" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\001\002\000\004\025\067\001\002\000" +
    "\032\021\uffc0\025\uffc0\030\uffc0\031\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\001" +
    "\002\000\024\025\071\036\043\037\042\040\045\041\036" +
    "\042\041\043\044\044\037\045\040\001\002\000\032\021" +
    "\uffc2\025\uffc2\030\uffc2\031\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\001\002\000" +
    "\004\021\076\001\002\000\026\021\uffbb\030\074\036\043" +
    "\037\042\040\045\041\036\042\041\043\044\044\037\045" +
    "\040\001\002\000\034\010\026\017\021\021\uffbc\024\022" +
    "\033\032\034\030\035\017\037\034\047\024\050\025\061" +
    "\020\062\023\063\027\001\002\000\004\021\uffba\001\002" +
    "\000\032\021\uffb1\025\uffb1\030\uffb1\031\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\001\002\000\004\015\100\001\002\000\004\063\101\001" +
    "\002\000\004\031\ufff6\001\002\000\030\013\ufff7\014\ufff7" +
    "\015\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\063\ufff7\001\002\000\004\060\272\001\002" +
    "\000\006\002\ufffc\013\106\001\002\000\004\002\000\001" +
    "\002\000\004\063\112\001\002\000\006\002\ufff4\013\ufff4" +
    "\001\002\000\006\002\ufffd\013\106\001\002\000\006\002" +
    "\ufff3\013\ufff3\001\002\000\004\024\113\001\002\000\034" +
    "\010\026\017\021\024\022\025\ufff0\033\032\034\030\035" +
    "\017\037\034\047\024\050\025\061\020\062\023\063\027" +
    "\001\002\000\004\025\115\001\002\000\004\026\116\001" +
    "\002\000\040\004\uffed\007\uffed\011\uffed\022\uffed\023\uffed" +
    "\027\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\063\uffed\064\uffed\001\002\000\040\004\141" +
    "\007\144\011\120\022\142\023\134\027\133\051\130\052" +
    "\123\053\135\054\143\055\136\056\131\057\145\063\126" +
    "\064\125\001\002\000\004\024\260\001\002\000\040\004" +
    "\uffe5\007\uffe5\011\uffe5\022\uffe5\023\uffe5\027\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\063" +
    "\uffe5\064\uffe5\001\002\000\040\004\uffe7\007\uffe7\011\uffe7" +
    "\022\uffe7\023\uffe7\027\uffe7\051\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\063\uffe7\064\uffe7\001\002" +
    "\000\004\063\256\001\002\000\040\004\uffec\007\uffec\011" +
    "\uffec\022\uffec\023\uffec\027\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\063\uffec\064\uffec\001" +
    "\002\000\004\031\255\001\002\000\006\024\056\046\015" +
    "\001\002\000\040\004\uffe6\007\uffe6\011\uffe6\022\uffe6\023" +
    "\uffe6\027\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\063\uffe6\064\uffe6\001\002\000\004\063" +
    "\253\001\002\000\004\063\251\001\002\000\004\031\250" +
    "\001\002\000\006\002\ufff1\013\ufff1\001\002\000\004\024" +
    "\245\001\002\000\016\051\221\052\220\054\222\055\217" +
    "\056\215\057\216\001\002\000\004\063\213\001\002\000" +
    "\004\031\212\001\002\000\004\031\211\001\002\000\004" +
    "\024\166\001\002\000\032\010\026\017\021\024\022\033" +
    "\032\034\030\035\017\037\034\047\024\050\025\061\020" +
    "\062\023\063\027\001\002\000\004\063\162\001\002\000" +
    "\004\024\154\001\002\000\004\063\150\001\002\000\004" +
    "\031\147\001\002\000\040\004\uffea\007\uffea\011\uffea\022" +
    "\uffea\023\uffea\027\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\063\uffea\064\uffea\001\002\000" +
    "\006\031\uffd5\046\152\001\002\000\004\031\uffdf\001\002" +
    "\000\032\010\026\017\021\024\022\033\032\034\030\035" +
    "\017\037\034\047\024\050\025\061\020\062\023\063\027" +
    "\001\002\000\024\031\uffd6\036\043\037\042\040\045\041" +
    "\036\042\041\043\044\044\037\045\040\001\002\000\032" +
    "\010\026\017\021\024\022\033\032\034\030\035\017\037" +
    "\034\047\024\050\025\061\020\062\023\063\027\001\002" +
    "\000\024\025\156\036\043\037\042\040\045\041\036\042" +
    "\041\043\044\044\037\045\040\001\002\000\004\026\157" +
    "\001\002\000\040\004\uffed\007\uffed\011\uffed\022\uffed\023" +
    "\uffed\027\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\063\uffed\064\uffed\001\002\000\040\004" +
    "\141\007\144\011\120\022\142\023\134\027\161\051\130" +
    "\052\123\053\135\054\143\055\136\056\131\057\145\063" +
    "\126\064\125\001\002\000\040\004\uffcc\007\uffcc\011\uffcc" +
    "\022\uffcc\023\uffcc\027\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\063\uffcc\064\uffcc\001\002" +
    "\000\006\031\uffd5\046\152\001\002\000\004\031\uffe0\001" +
    "\002\000\024\031\165\036\043\037\042\040\045\041\036" +
    "\042\041\043\044\044\037\045\040\001\002\000\040\004" +
    "\uffe4\007\uffe4\011\uffe4\022\uffe4\023\uffe4\027\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\063" +
    "\uffe4\064\uffe4\001\002\000\032\010\026\017\021\024\022" +
    "\033\032\034\030\035\017\037\034\047\024\050\025\061" +
    "\020\062\023\063\027\001\002\000\024\025\170\036\043" +
    "\037\042\040\045\041\036\042\041\043\044\044\037\045" +
    "\040\001\002\000\004\026\171\001\002\000\040\004\uffed" +
    "\007\uffed\011\uffed\022\uffed\023\uffed\027\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\063\uffed" +
    "\064\uffed\001\002\000\040\004\141\007\144\011\120\022" +
    "\142\023\134\027\173\051\130\052\123\053\135\054\143" +
    "\055\136\056\131\057\145\063\126\064\125\001\002\000" +
    "\044\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\022\uffd0" +
    "\023\uffd0\027\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\063\uffd0\064\uffd0\001\002\000\044" +
    "\004\uffce\005\177\006\176\007\uffce\011\uffce\022\uffce\023" +
    "\uffce\027\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\063\uffce\064\uffce\001\002\000\040\004" +
    "\uffd1\007\uffd1\011\uffd1\022\uffd1\023\uffd1\027\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\063" +
    "\uffd1\064\uffd1\001\002\000\004\026\206\001\002\000\004" +
    "\024\200\001\002\000\032\010\026\017\021\024\022\033" +
    "\032\034\030\035\017\037\034\047\024\050\025\061\020" +
    "\062\023\063\027\001\002\000\024\025\202\036\043\037" +
    "\042\040\045\041\036\042\041\043\044\044\037\045\040" +
    "\001\002\000\004\026\203\001\002\000\040\004\uffed\007" +
    "\uffed\011\uffed\022\uffed\023\uffed\027\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\063\uffed\064" +
    "\uffed\001\002\000\040\004\141\007\144\011\120\022\142" +
    "\023\134\027\205\051\130\052\123\053\135\054\143\055" +
    "\136\056\131\057\145\063\126\064\125\001\002\000\044" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\022\uffcf\023" +
    "\uffcf\027\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\063\uffcf\064\uffcf\001\002\000\040\004" +
    "\uffed\007\uffed\011\uffed\022\uffed\023\uffed\027\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\063" +
    "\uffed\064\uffed\001\002\000\040\004\141\007\144\011\120" +
    "\022\142\023\134\027\210\051\130\052\123\053\135\054" +
    "\143\055\136\056\131\057\145\063\126\064\125\001\002" +
    "\000\040\004\uffcd\007\uffcd\011\uffcd\022\uffcd\023\uffcd\027" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\063\uffcd\064\uffcd\001\002\000\040\004\uffe8\007" +
    "\uffe8\011\uffe8\022\uffe8\023\uffe8\027\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\063\uffe8\064" +
    "\uffe8\001\002\000\040\004\uffeb\007\uffeb\011\uffeb\022\uffeb" +
    "\023\uffeb\027\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\063\uffeb\064\uffeb\001\002\000\006" +
    "\031\uffd5\046\152\001\002\000\004\031\uffde\001\002\000" +
    "\004\063\242\001\002\000\004\063\237\001\002\000\004" +
    "\063\234\001\002\000\004\063\231\001\002\000\004\063" +
    "\226\001\002\000\004\063\223\001\002\000\004\046\224" +
    "\001\002\000\032\010\026\017\021\024\022\033\032\034" +
    "\030\035\017\037\034\047\024\050\025\061\020\062\023" +
    "\063\027\001\002\000\024\031\uffd9\036\043\037\042\040" +
    "\045\041\036\042\041\043\044\044\037\045\040\001\002" +
    "\000\004\046\227\001\002\000\032\010\026\017\021\024" +
    "\022\033\032\034\030\035\017\037\034\047\024\050\025" +
    "\061\020\062\023\063\027\001\002\000\024\031\uffdb\036" +
    "\043\037\042\040\045\041\036\042\041\043\044\044\037" +
    "\045\040\001\002\000\004\046\232\001\002\000\032\010" +
    "\026\017\021\024\022\033\032\034\030\035\017\037\034" +
    "\047\024\050\025\061\020\062\023\063\027\001\002\000" +
    "\024\031\uffda\036\043\037\042\040\045\041\036\042\041" +
    "\043\044\044\037\045\040\001\002\000\004\046\235\001" +
    "\002\000\032\010\026\017\021\024\022\033\032\034\030" +
    "\035\017\037\034\047\024\050\025\061\020\062\023\063" +
    "\027\001\002\000\024\031\uffdc\036\043\037\042\040\045" +
    "\041\036\042\041\043\044\044\037\045\040\001\002\000" +
    "\004\046\240\001\002\000\032\010\026\017\021\024\022" +
    "\033\032\034\030\035\017\037\034\047\024\050\025\061" +
    "\020\062\023\063\027\001\002\000\024\031\uffd8\036\043" +
    "\037\042\040\045\041\036\042\041\043\044\044\037\045" +
    "\040\001\002\000\004\046\243\001\002\000\032\010\026" +
    "\017\021\024\022\033\032\034\030\035\017\037\034\047" +
    "\024\050\025\061\020\062\023\063\027\001\002\000\024" +
    "\031\uffd7\036\043\037\042\040\045\041\036\042\041\043" +
    "\044\044\037\045\040\001\002\000\032\010\026\017\021" +
    "\024\022\033\032\034\030\035\017\037\034\047\024\050" +
    "\025\061\020\062\023\063\027\001\002\000\024\025\247" +
    "\036\043\037\042\040\045\041\036\042\041\043\044\044" +
    "\037\045\040\001\002\000\004\031\uffd2\001\002\000\040" +
    "\004\uffe9\007\uffe9\011\uffe9\022\uffe9\023\uffe9\027\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\063\uffe9\064\uffe9\001\002\000\006\031\uffd5\046\152\001" +
    "\002\000\004\031\uffdd\001\002\000\006\031\uffd5\046\152" +
    "\001\002\000\004\031\uffe2\001\002\000\040\004\uffe3\007" +
    "\uffe3\011\uffe3\022\uffe3\023\uffe3\027\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\063\uffe3\064" +
    "\uffe3\001\002\000\006\031\uffd5\046\152\001\002\000\004" +
    "\031\uffe1\001\002\000\004\063\012\001\002\000\004\031" +
    "\262\001\002\000\032\010\026\017\021\024\022\033\032" +
    "\034\030\035\017\037\034\047\024\050\025\061\020\062" +
    "\023\063\027\001\002\000\024\031\264\036\043\037\042" +
    "\040\045\041\036\042\041\043\044\044\037\045\040\001" +
    "\002\000\004\063\012\001\002\000\004\025\266\001\002" +
    "\000\004\026\267\001\002\000\040\004\uffed\007\uffed\011" +
    "\uffed\022\uffed\023\uffed\027\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\063\uffed\064\uffed\001" +
    "\002\000\040\004\141\007\144\011\120\022\142\023\134" +
    "\027\271\051\130\052\123\053\135\054\143\055\136\056" +
    "\131\057\145\063\126\064\125\001\002\000\040\004\uffcb" +
    "\007\uffcb\011\uffcb\022\uffcb\023\uffcb\027\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\063\uffcb" +
    "\064\uffcb\001\002\000\004\024\273\001\002\000\034\010" +
    "\026\017\021\024\022\025\ufff0\033\032\034\030\035\017" +
    "\037\034\047\024\050\025\061\020\062\023\063\027\001" +
    "\002\000\004\025\275\001\002\000\004\026\276\001\002" +
    "\000\040\004\uffed\007\uffed\011\uffed\022\uffed\023\uffed\027" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\057\uffed\063\uffed\064\uffed\001\002\000\040\004\141\007" +
    "\144\011\120\022\142\023\134\027\300\051\130\052\123" +
    "\053\135\054\143\055\136\056\131\057\145\063\126\064" +
    "\125\001\002\000\006\002\ufff2\013\ufff2\001\002\000\004" +
    "\031\ufff5\001\002\000\030\013\ufff8\014\ufff8\015\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\063\ufff8\001\002\000\004\031\310\001\002\000\004\031" +
    "\307\001\002\000\004\031\306\001\002\000\030\013\ufffb" +
    "\014\ufffb\015\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\063\ufffb\001\002\000\030\013\ufffa" +
    "\014\ufffa\015\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\063\ufffa\001\002\000\030\013\ufff9" +
    "\014\ufff9\015\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\063\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\014\002\012\003\006\005\003\014\004\027" +
    "\007\001\001\000\010\014\304\022\303\027\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\032\016" +
    "\030\026\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\072\016\030\026\015\030" +
    "\071\001\001\000\010\015\067\016\030\026\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\034\016\030\026\015\001\001\000\002\001\001\000\010" +
    "\015\054\016\030\026\015\001\001\000\010\015\053\016" +
    "\030\026\015\001\001\000\010\015\052\016\030\026\015" +
    "\001\001\000\010\015\051\016\030\026\015\001\001\000" +
    "\010\015\050\016\030\026\015\001\001\000\010\015\047" +
    "\016\030\026\015\001\001\000\010\015\046\016\030\026" +
    "\015\001\001\000\010\015\045\016\030\026\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\056\015\057\016" +
    "\030\026\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\061\015\057\016\030\026\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\072\016\030\026\015\030\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\104\007\107\010\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\113\015\057\016\030\026\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\116\001\001\000\022" +
    "\013\123\014\136\016\131\017\121\022\145\023\126\024" +
    "\120\025\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\163\016\030\026\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\150\001\001\000\002\001\001" +
    "\000\010\015\152\016\030\026\015\001\001\000\002\001" +
    "\001\000\010\015\154\016\030\026\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\157\001\001\000" +
    "\022\013\123\014\136\016\131\017\121\022\145\023\126" +
    "\024\120\025\137\001\001\000\002\001\001\000\004\031" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\166\016\030\026\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\171\001\001" +
    "\000\022\013\123\014\136\016\131\017\121\022\145\023" +
    "\126\024\120\025\137\001\001\000\004\020\173\001\001" +
    "\000\004\021\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\200\016\030\026\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\203\001\001\000\022\013\123\014\136\016\131\017\121" +
    "\022\145\023\126\024\120\025\137\001\001\000\002\001" +
    "\001\000\004\012\206\001\001\000\022\013\123\014\136" +
    "\016\131\017\121\022\145\023\126\024\120\025\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\224\016\030\026\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\227\016\030\026\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\232" +
    "\016\030\026\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\235\016\030\026\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\240\016\030\026" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\243\016\030\026\015\001\001\000\002\001\001\000" +
    "\010\015\245\016\030\026\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\251\001" +
    "\001\000\002\001\001\000\004\031\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\256\001\001\000" +
    "\002\001\001\000\004\014\260\001\001\000\002\001\001" +
    "\000\010\015\262\016\030\026\015\001\001\000\002\001" +
    "\001\000\004\014\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\267\001\001\000\022\013\123\014" +
    "\136\016\131\017\121\022\145\023\126\024\120\025\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\273\015\057\016\030\026\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\276\001\001\000\022\013" +
    "\123\014\136\016\131\017\121\022\145\023\126\024\120" +
    "\025\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){ this.s = s; }
    public Symbol getS(){ return this.s; }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALOR ::= Corchete_a LISTA_VALORES Corchete_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALOR ::= None 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALOR ::= False 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR ::= True 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALOR ::= Char 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALOR ::= Cadena 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALOR ::= NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALOR ::= NumeroEntero 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("VALOR",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTA_VALORES ::= EXPRESION Coma LISTA_VALORES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTA_VALORES ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTA_VALORES ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= VALOR 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= Input Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= Input Parentesis_a Cadena Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION Potencia EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION Modulo EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION Division EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION Multiplicacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FOR_LOOP ::= For Parentesis_a ASIGNACION PuntoComa EXPRESION PuntoComa ASIGNACION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FOR_LOOP",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILE_LOOP ::= While Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("WHILE_LOOP",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE_BLOQUE ::= Else Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELSE_BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSE_BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELSE_BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELIF_BLOQUES ::= ELIF_BLOQUES Elif Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELIF_BLOQUES",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELIF_BLOQUES ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ELIF_BLOQUES",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_STATEMENT ::= If Parentesis_a EXPRESION Parentesis_c Llave_a SENTENCIAS Llave_c ELIF_BLOQUES ELSE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRINT_STMT ::= Print Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PRINT_STMT",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPC_INIT ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_INIT",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPC_INIT ::= Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_INIT",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_TIPADA ::= Const CharType Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_TIPADA ::= Const String Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_TIPADA ::= Const Bool Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_TIPADA ::= Const Float Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_TIPADA ::= Const Int Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_TIPADA ::= Const Double Identificador Op_asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_TIPADA ::= CharType Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_TIPADA ::= Double Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_TIPADA ::= String Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_TIPADA ::= Bool Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_TIPADA ::= Float Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_TIPADA ::= Int Identificador OPC_INIT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPADA",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= Return EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= FOR_LOOP 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= WHILE_LOOP 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= IF_STATEMENT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= PRINT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= LLAMADA_FUNCION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DECLARACION_TIPADA PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= EXPRESION Coma PARAMS 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PARAMS",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= Def Identificador Parentesis_a PARAMS Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION_PRINCIPAL ::= Def Main Parentesis_a PARAMS Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCION_PRINCIPAL",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCIONES",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FUNCIONES",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IMPORT_STMT ::= Import Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IMPORT_STMT",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IMPORT_STMT ::= From Identificador Import Identificador 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IMPORT_STMT",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= IMPORT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES ::= ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES ::= DECLARACIONES IMPORT_STMT PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES ::= DECLARACIONES DECLARACION_TIPADA PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES ::= DECLARACIONES ASIGNACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPC_FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPC_FUNCIONES ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPC_DECL ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_DECL",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OPC_DECL ::= DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("OPC_DECL",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= OPC_DECL FUNCION_PRINCIPAL OPC_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

